<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小莫-fighting</title>
  <subtitle>日本語を習っています.....</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.xiaomo.info/"/>
  <updated>2016-11-25T07:05:23.441Z</updated>
  <id>http://blog.xiaomo.info/</id>
  
  <author>
    <name>xiaomo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>拥抱https(http全面切换到https)</title>
    <link href="http://blog.xiaomo.info/2016/11/25/HttpToHttps/"/>
    <id>http://blog.xiaomo.info/2016/11/25/HttpToHttps/</id>
    <published>2016-11-24T16:00:00.000Z</published>
    <updated>2016-11-25T07:05:23.441Z</updated>
    
    <content type="html"><![CDATA[<p>在百度和谷歌的鼓励下，现在很多网站都开始换成https了啊，只是有的没有隐私数据的网站感觉没有太大必要，但是设计要密码账号的网站必须要的。不过有部分网站没有换成https只是暂时的，2-3年后预估互联网会全部变成https。因为https成本也不是很高，免费SSL证书也有，比如腾讯免费SSL证书，starssl免费证书等。关键是https对SEO更加友好。<br><a id="more"></a><br><img src="http://static.xiaomo.info/images/linux.png" alt="1"></p>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="域-名：阿里云"><a href="#域-名：阿里云" class="headerlink" title="域 名：阿里云"></a>域 名：阿里云</h4><h4 id="服务器：阿里云ECS"><a href="#服务器：阿里云ECS" class="headerlink" title="服务器：阿里云ECS"></a>服务器：阿里云ECS</h4><h4 id="SSL证书-腾讯SSL免费版"><a href="#SSL证书-腾讯SSL免费版" class="headerlink" title="SSL证书: 腾讯SSL免费版"></a>SSL证书: 腾讯SSL免费版</h4><h4 id="web容器：nginx-php"><a href="#web容器：nginx-php" class="headerlink" title="web容器：nginx+php"></a>web容器：nginx+php</h4><h3 id="一、为什么要切换到HTTPS"><a href="#一、为什么要切换到HTTPS" class="headerlink" title="一、为什么要切换到HTTPS"></a>一、为什么要切换到HTTPS</h3><h4 id="1-安全方面"><a href="#1-安全方面" class="headerlink" title="1.安全方面"></a>1.安全方面</h4><p>HTTPS比HTTP更加安全</p>
<h4 id="2-技术方面"><a href="#2-技术方面" class="headerlink" title="2.技术方面"></a>2.技术方面</h4><p>不懂HTTPS多不好意思啊，所以就当是学习了。</p>
<h3 id="二、为什么要用腾讯SSL"><a href="#二、为什么要用腾讯SSL" class="headerlink" title="二、为什么要用腾讯SSL"></a>二、为什么要用腾讯SSL</h3><p>因为免费啊，毕竟穷人用不起企业级别的，先用一年免费的再说。starssl是外国的，看不习惯鸟语还是老老实实用中文。</p>
<h3 id="三、申请证书"><a href="#三、申请证书" class="headerlink" title="三、申请证书"></a>三、申请证书</h3><p>申请地址：<a href="https://console.qcloud.com/ssl" target="_blank" rel="external">https://console.qcloud.com/ssl</a></p>
<p>申请证书之后会给一个下载链接，下载之后会有3个文件夹。分别是nginx、tomcat、apache。因为我个人用的是nginx，就说下nginx的配置。没有调查就没有发言权，用其他两种的小伙伴请自行研究。</p>
<h4 id="四、DNS配置"><a href="#四、DNS配置" class="headerlink" title="四、DNS配置"></a>四、DNS配置</h4><p>证书申请通过之后会让你配置一个CNAME类型的DNS，根据提示配置一下就好了。</p>
<h3 id="五、上传"><a href="#五、上传" class="headerlink" title="五、上传"></a>五、上传</h3><p>将下载的证书nginx文件夹打包上传到 <code>usr/local/nginx</code>目录</p>
<h3 id="六、nginx配置"><a href="#六、nginx配置" class="headerlink" title="六、nginx配置"></a>六、nginx配置</h3><p>先确认<code>nginx</code>安装时已编译http_ssl模块，也就是执行如下命令查看是否存在–with-http_ssl_module参数：</p>
<p>执行<code>/usr/local/nginx/sbin/nginx -V</code>这个命令</p>
<p>在返回的结果中找是否有<code>--with-http_ssl_module</code>参数，没有的话要先激活这个模块。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">nginx <span class="string">version:</span> nginx/<span class="number">1.6</span><span class="number">.0</span></div><div class="line">built by gcc <span class="number">4.4</span><span class="number">.7</span> <span class="number">20120313</span> (Red Hat <span class="number">4.4</span><span class="number">.7</span><span class="number">-4</span>) (GCC)</div><div class="line">TLS SNI support enabled</div><div class="line">configure <span class="string">arguments:</span> --prefix=<span class="regexp">/usr/</span>local<span class="regexp">/nginx --with-http_ssl_module --with-openssl=/</span>usr<span class="regexp">/local/</span>src<span class="regexp">/openssl-1.0.1/</span></div></pre></td></tr></table></figure>
<p>然后在<code>usr/local/nginx/conf/nginx.conf</code>中修改配置，配置如下<br>在server中加入以下内容，注意修改一下对应<code>ssl_certificate</code>和<code>ssl_certificate_key</code>文件的位置</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">listen</span> <span class="number">443</span>;</div><div class="line">        <span class="attribute">ssl</span> <span class="literal">on</span>;</div><div class="line">        <span class="attribute">ssl_certificate</span> /usr/local/nginx/ssl/1_blog.xiaomo.info_bundle.crt; <span class="comment">#证书公钥文件路径</span></div><div class="line">        <span class="attribute">ssl_certificate_key</span>  /usr/local/nginx/ssl/2_blog.xiaomo.<span class="literal">info</span>.key;   <span class="comment">#证书私钥文件路径</span></div><div class="line">        <span class="attribute">ssl_session_timeout</span>  <span class="number">5m</span>;</div><div class="line">        <span class="attribute">ssl_protocols</span> SSLv3 TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</div><div class="line">        <span class="attribute">ssl_ciphers</span>  HIGH:!ADH:!EXPORT56:RC4+RSA:+MEDIUM;</div></pre></td></tr></table></figure>
<p>这一段主要是开启SSL</p>
<p>保存配置之后要确认是否配置正确，执行<code>/usr/local/nginx/sbin/nginx -t</code>命令</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">linux-<span class="keyword">test</span>:~ # /usr/<span class="keyword">local</span>/nginx/sbin/nginx -t</div><div class="line">#如下显示则为正确无误：</div><div class="line">nginx: the configuration <span class="keyword">file</span> /usr/<span class="keyword">local</span>/nginx/<span class="keyword">conf</span>/nginx.<span class="keyword">conf</span> <span class="keyword">syntax</span> is ok</div><div class="line">nginx: configuration <span class="keyword">file</span> /usr/<span class="keyword">local</span>/nginx/<span class="keyword">conf</span>/nginx.<span class="keyword">conf</span> <span class="keyword">test</span> is successful</div></pre></td></tr></table></figure>
<p>重定向http到https,加入以下这段，意思是访问http的网站的时候会重定向到https上去。</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">location</span> / &#123;</div><div class="line">             <span class="attribute">if</span> (<span class="variable">$scheme</span> = http) &#123;</div><div class="line">                     <span class="attribute">return</span> <span class="number">301</span> https://<span class="variable">$host</span><span class="variable">$request_uri</span>;</div><div class="line">                     &#125;</div><div class="line">     &#125;</div></pre></td></tr></table></figure>
<h3 id="七、生效"><a href="#七、生效" class="headerlink" title="七、生效"></a>七、生效</h3><p>执行<code>/usr/local/nginx/sbin/nginx -s reload</code>,如无错误，现在应该可以顺利访问 <a href="blog.xiaomo.info">blog.xiaomo.info</a>这个网站，并且是https的。</p>
<h3 id="八、附录"><a href="#八、附录" class="headerlink" title="八、附录"></a>八、附录</h3><p>nginx配置</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="section">server</span></div><div class="line">    &#123;</div><div class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</div><div class="line">        <span class="attribute">listen</span> <span class="number">443</span>;</div><div class="line">        <span class="attribute">ssl</span> <span class="literal">on</span>;</div><div class="line">        <span class="attribute">ssl_certificate</span> /usr/local/nginx/ssl/1_blog.xiaomo.info_bundle.crt; <span class="comment">#证书公钥文件路径</span></div><div class="line">        <span class="attribute">ssl_certificate_key</span>  /usr/local/nginx/ssl/2_blog.xiaomo.<span class="literal">info</span>.key;   <span class="comment">#证书私钥文件路径</span></div><div class="line">        <span class="attribute">ssl_session_timeout</span>  <span class="number">5m</span>;</div><div class="line">        <span class="attribute">ssl_protocols</span> SSLv3 TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</div><div class="line">        <span class="attribute">ssl_ciphers</span>  HIGH:!ADH:!EXPORT56:RC4+RSA:+MEDIUM;</div><div class="line"></div><div class="line">        <span class="attribute">server_name</span> blog.xiaomo.<span class="literal">info</span>;</div><div class="line">        <span class="attribute">index</span> index.html index.htm index.php;</div><div class="line">        <span class="attribute">root</span>  /data2/xiaomo.github.io/public;</div><div class="line"></div><div class="line">         <span class="attribute">location</span> <span class="regexp">~ \.(jpg|png|gif|js|css|swf|flv|ico)$</span> &#123;</div><div class="line">                 <span class="attribute">expires</span> <span class="number">12h</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="attribute">location</span> / &#123;</div><div class="line">                <span class="attribute">if</span> (<span class="variable">$scheme</span> = http) &#123;</div><div class="line">                        <span class="attribute">return</span> <span class="number">301</span> https://<span class="variable">$host</span><span class="variable">$request_uri</span>;</div><div class="line">                        &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="attribute">location</span> <span class="regexp">~* ^/(doc|logs|app|sys)/</span> &#123;</div><div class="line">                <span class="attribute">return</span> <span class="number">403</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="attribute">location</span> <span class="regexp">~ .*\.(php|php5)?$</span></div><div class="line">        &#123;</div><div class="line">                <span class="attribute">fastcgi_connect_timeout</span> <span class="number">300</span>;</div><div class="line">                <span class="attribute">fastcgi_send_timeout</span> <span class="number">300</span>;</div><div class="line">                <span class="attribute">fastcgi_read_timeout</span> <span class="number">300</span>;</div><div class="line">                <span class="attribute">try_files</span> <span class="variable">$uri</span> =<span class="number">404</span>;</div><div class="line">                <span class="attribute">error_page</span> <span class="number">404</span> = /<span class="number">404</span>.html;</div><div class="line">                <span class="attribute">fastcgi_pass</span>  unix:/tmp/php-cgi.sock;</div><div class="line">                <span class="attribute">include</span> fastcgi.conf;</div><div class="line">                <span class="attribute">fastcgi_index</span>  index.php;</div><div class="line">                <span class="attribute">include</span> fastcgi.conf;</div><div class="line">                <span class="attribute">fastcgi_index</span>  index.php;</div><div class="line">                <span class="attribute">fastcgi_param</span>  SCRIPT_FILENAME <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</div><div class="line">                <span class="attribute">include</span>        fastcgi_params;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="attribute">error_log</span>  /home/wwwlogs/error_log.log;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在百度和谷歌的鼓励下，现在很多网站都开始换成https了啊，只是有的没有隐私数据的网站感觉没有太大必要，但是设计要密码账号的网站必须要的。不过有部分网站没有换成https只是暂时的，2-3年后预估互联网会全部变成https。因为https成本也不是很高，免费SSL证书也有，比如腾讯免费SSL证书，starssl免费证书等。关键是https对SEO更加友好。&lt;br&gt;
    
    </summary>
    
      <category term="生活" scheme="http://blog.xiaomo.info/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="技术" scheme="http://blog.xiaomo.info/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>swagger ui和spring boot集成生成api文档</title>
    <link href="http://blog.xiaomo.info/2016/11/11/JavaSpringBootSwaggerUi/"/>
    <id>http://blog.xiaomo.info/2016/11/11/JavaSpringBootSwaggerUi/</id>
    <published>2016-11-10T16:00:00.000Z</published>
    <updated>2016-11-25T07:12:23.553Z</updated>
    
    <content type="html"><![CDATA[<p>曾经一度我一直想在做前后端分离的时间写api接口是一个痛苦的过程，虽然也在网上找了一些可以填写api的系统，但使用起来总是不尽人意。现在，终于找到一款可以和api完美集成自动生成api文档加测试的工具，真是一件让人高兴的事呢。如果你也需要，那就好好看看这篇文章吧。<br><a id="more"></a><br><img src="http://static.xiaomo.info/images/java_banner.png" alt="1"></p>
<h3 id="一、环境"><a href="#一、环境" class="headerlink" title="一、环境"></a>一、环境</h3><h4 id="1-JAVA8"><a href="#1-JAVA8" class="headerlink" title="1. JAVA8"></a>1. JAVA8</h4><h4 id="2-MAVEN-3-0-5"><a href="#2-MAVEN-3-0-5" class="headerlink" title="2. MAVEN 3.0.5"></a>2. MAVEN 3.0.5</h4><h4 id="3-IDEA-2016-2-5"><a href="#3-IDEA-2016-2-5" class="headerlink" title="3. IDEA 2016.2.5"></a>3. IDEA 2016.2.5</h4><h4 id="4-spring-boot-1-4-1"><a href="#4-spring-boot-1-4-1" class="headerlink" title="4. spring boot 1.4.1"></a>4. spring boot 1.4.1</h4><h3 id="二、相关依赖"><a href="#二、相关依赖" class="headerlink" title="二、相关依赖"></a>二、相关依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="三、配置"><a href="#三、配置" class="headerlink" title="三、配置"></a>三、配置</h3><p>设置了一些默认显示的api相关信息，最后上截图的时就可以比较清楚的看到。</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@Configuration</span></div><div class="line"><span class="variable">@EnableSwagger2</span></div><div class="line">public class Swagger2Config &#123;</div><div class="line"></div><div class="line">    <span class="variable">@Bean</span></div><div class="line">    public Docket createRestApi() &#123;</div><div class="line">        <span class="selector-tag">return</span> <span class="selector-tag">new</span> <span class="selector-tag">Docket</span>(DocumentationType.SWAGGER_2)</div><div class="line">                <span class="selector-class">.apiInfo</span>(apiInfo())</div><div class="line">                <span class="selector-class">.select</span>()</div><div class="line">                <span class="selector-class">.apis</span>(RequestHandlerSelectors.basePackage(<span class="string">"info.xiaomo.website"</span>))</div><div class="line">                <span class="selector-class">.paths</span>(PathSelectors.any())</div><div class="line">                <span class="selector-class">.build</span>();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="selector-tag">private</span> <span class="selector-tag">ApiInfo</span> <span class="selector-tag">apiInfo</span>() &#123;</div><div class="line">        <span class="selector-tag">return</span> <span class="selector-tag">new</span> <span class="selector-tag">ApiInfoBuilder</span>()</div><div class="line">                <span class="selector-class">.title</span>(<span class="string">"Spring Boot中使用Swagger2构建RESTful APIs"</span>)</div><div class="line">                <span class="selector-class">.description</span>(<span class="string">"api根地址：http://api.xiaomo.info:8080/"</span>)</div><div class="line">                <span class="selector-class">.termsOfServiceUrl</span>(<span class="string">"http://blog.xiaomo.info/"</span>)</div><div class="line">                <span class="selector-class">.contact</span>(<span class="string">"小莫"</span>)</div><div class="line">                <span class="selector-class">.version</span>(<span class="string">"1.0"</span>)</div><div class="line">                <span class="selector-class">.build</span>();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="四、相关注解解读"><a href="#四、相关注解解读" class="headerlink" title="四、相关注解解读"></a>四、相关注解解读</h3><h4 id="1-Api"><a href="#1-Api" class="headerlink" title="1. @Api"></a>1. @Api</h4><p>用在类上，说明该类的作用<br><code>@Api(value = &quot;UserController&quot;, description = &quot;用户相关api&quot;)</code></p>
<h4 id="2-ApiOperation"><a href="#2-ApiOperation" class="headerlink" title="2. @ApiOperation"></a>2. @ApiOperation</h4><p>用在方法上，说明方法的作用<br><code>@ApiOperation(value = &quot;查找用户&quot;, notes = &quot;查找用户&quot;, httpMethod = &quot;GET&quot;, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)</code></p>
<h4 id="3-ApiImplicitParams"><a href="#3-ApiImplicitParams" class="headerlink" title="3 @ApiImplicitParams"></a>3 @ApiImplicitParams</h4><p>用在方法上包含一组参数说明</p>
<h4 id="4-ApiImplicitParam"><a href="#4-ApiImplicitParam" class="headerlink" title="4. @ApiImplicitParam"></a>4. @ApiImplicitParam</h4><p>用在@ApiImplicitParams注解中，指定一个请求参数的各个方面<br>     paramType：参数放在哪个地方<br>     header–&gt;请求参数的获取：@RequestHeader<br>     query–&gt;请求参数的获取：@RequestParam<br>     path（用于restful接口）–&gt;请求参数的获取：@PathVariable<br>     body（不常用）<br>     form（不常用）<br>     name：参数名<br>     dataType：参数类型<br>     required：参数是否必须传<br>     value：参数的意思<br>     defaultValue：参数的默认值</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@ApiImplicitParams</span>(&#123;</div><div class="line">        <span class="variable">@ApiImplicitParam</span>(name = <span class="string">"id"</span>, value = <span class="string">"唯一id"</span>, required = true, dataType = <span class="string">"Long"</span>, paramType = <span class="string">"path"</span>),</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h4 id="5-ApiResponses"><a href="#5-ApiResponses" class="headerlink" title="5. @ApiResponses"></a>5. @ApiResponses</h4><p>用于表示一组响应</p>
<h4 id="6-ApiResponse"><a href="#6-ApiResponse" class="headerlink" title="6. @ApiResponse"></a>6. @ApiResponse</h4><p>用在@ApiResponses中，一般用于表达一个错误的响应信息<br>     code：数字，例如400<br>     message：信息，例如”请求参数没填好”<br>     response：抛出异常的类</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@ApiResponses</span>(value = &#123;  </div><div class="line">          <span class="variable">@ApiResponse</span>(code = <span class="number">400</span>, message = <span class="string">"No Name Provided"</span>)  </div><div class="line">  &#125;)</div></pre></td></tr></table></figure>
<h4 id="7-ApiModel"><a href="#7-ApiModel" class="headerlink" title="7. @ApiModel"></a>7. @ApiModel</h4><p> 描述一个Model的信息（这种一般用在post创建的时候，使用@RequestBody这样的场景，请求参数无法使用@ApiImplicitParam注解进行描述的时候）<br> <code>@ApiModel(value = &quot;用户实体类&quot;)</code></p>
<h4 id="8-ApiModelProperty"><a href="#8-ApiModelProperty" class="headerlink" title="8. @ApiModelProperty"></a>8. @ApiModelProperty</h4><p>描述一个model的属性<br><code>@ApiModelProperty(value = &quot;登录用户&quot;)</code></p>
<h4 id="五、-和Swagger-UI的集成"><a href="#五、-和Swagger-UI的集成" class="headerlink" title="五、 和Swagger UI的集成"></a>五、 和Swagger UI的集成</h4><p>首先，从github <a href="https://github.com/swagger-api/swagger-ui" target="_blank" rel="external">swagger-ui</a> 上下载Swagger-UI, 把该项目dist目录下的内容拷贝到项目的resources的目录public下。</p>
<h4 id="六、访问"><a href="#六、访问" class="headerlink" title="六、访问"></a>六、访问</h4><p><a href="http://localhost:8080/swagger-ui.html" target="_blank" rel="external">http://localhost:8080/swagger-ui.html</a> 就可以看到效果如下<br><img src="http://static.xiaomo.info/images/swagger.png" alt=""></p>
<h4 id="七、-项目实例"><a href="#七、-项目实例" class="headerlink" title="七、 项目实例"></a>七、 项目实例</h4><p><a href="https://github.com/JavaUsers/xiaomo-info-java/tree/master/website" target="_blank" rel="external">https://github.com/JavaUsers/xiaomo-info-java/tree/master/website</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;曾经一度我一直想在做前后端分离的时间写api接口是一个痛苦的过程，虽然也在网上找了一些可以填写api的系统，但使用起来总是不尽人意。现在，终于找到一款可以和api完美集成自动生成api文档加测试的工具，真是一件让人高兴的事呢。如果你也需要，那就好好看看这篇文章吧。&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="http://blog.xiaomo.info/categories/java/"/>
    
    
      <category term="java" scheme="http://blog.xiaomo.info/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>lombok简化java代码注解的使用</title>
    <link href="http://blog.xiaomo.info/2016/11/08/JavaLombok/"/>
    <id>http://blog.xiaomo.info/2016/11/08/JavaLombok/</id>
    <published>2016-11-07T16:00:00.000Z</published>
    <updated>2016-11-25T07:41:41.688Z</updated>
    
    <content type="html"><![CDATA[<p>今天在stackoverflow上回答问题的时候发现了几个不得了的注解，是我从来没有见过的。然后呢，为了回答别人的问题，我就去查资料了。。。觉得挺有用的，记录一下。。<br><a id="more"></a><br><img src="http://static.xiaomo.info/images/java_banner.png" alt="1"></p>
<h3 id="一、缘由"><a href="#一、缘由" class="headerlink" title="一、缘由"></a>一、缘由</h3><p>在<code>stackoverflow</code>上看到了这个问题。 <a href="https://stackoverflow.com/questions/40169763/spring-boot-restcontroller-not-work-with-lombok/40478142#40478142" target="_blank" rel="external">spring boot RestController not work with lombok</a>,然后就有了这篇博客。。</p>
<h3 id="二、lombok是什么鬼"><a href="#二、lombok是什么鬼" class="headerlink" title="二、lombok是什么鬼"></a>二、lombok是什么鬼</h3><h4 id="1-maven引用"><a href="#1-maven引用" class="headerlink" title="1. maven引用"></a>1. maven引用</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="2-一些api"><a href="#2-一些api" class="headerlink" title="2. 一些api"></a>2. 一些api</h4><p>ombok 注解：<br>lombok 提供的注解不多，可以参考官方视频的讲解和官方文档。<br>Lombok 注解在线帮助文档：<a href="http://projectlombok.org/features/index.html" target="_blank" rel="external">http://projectlombok.org/features/index.html</a> .<br>下面介绍几个我常用的 lombok 注解：<br><code>@Data</code>   ：注解在类上；提供类所有属性的 getting 和 setting 方法，此外还提供了equals、canEqual、hashCode、toString 方法<br><code>@Setter</code>：注解在属性上；为属性提供 setting 方法<br><code>@Getter</code>：注解在属性上；为属性提供 getting 方法<br><code>@Log4j</code> ：注解在类上；为类提供一个 属性名为log 的 log4j 日志对象<br><code>@NoArgsConstructor</code>：注解在类上；为类提供一个无参的构造方法<br><code>@AllArgsConstructor</code>：注解在类上；为类提供一个全参的构造方法</p>
<p>下面是简单示例</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Data</span>                   <span class="comment">// 生成 getter/setter/equals/canEqual/hashCode/toString</span></div><div class="line"><span class="meta">@NoArgsConstructor</span>      <span class="comment">// 为类提供一个无参的构造方法</span></div><div class="line"><span class="meta">@AllArgsConstructor</span>     <span class="comment">// 为类提供一个全参的构造方法</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></div><div class="line"></div><div class="line"> <span class="keyword">private</span> String id;</div><div class="line"> <span class="keyword">private</span> String name;</div><div class="line"> <span class="keyword">private</span> String identity;</div><div class="line"> <span class="keyword">private</span> Logger log = Logger.getLogger(Person.<span class="keyword">class</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>不使用 lombok 的方案</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Person &#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="keyword">String</span> id;</div><div class="line"> <span class="keyword">private</span> <span class="keyword">String</span> name;</div><div class="line"> <span class="keyword">private</span> <span class="keyword">String</span> identity;</div><div class="line"> <span class="keyword">private</span> Logger log = Logger.getLogger(Person.<span class="keyword">class</span>);</div><div class="line"></div><div class="line"> <span class="keyword">public</span> Person() &#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> Person(<span class="keyword">String</span> id, <span class="keyword">String</span> name, <span class="keyword">String</span> identity) &#123;</div><div class="line">    <span class="keyword">this</span>.id              = id;</div><div class="line">    <span class="keyword">this</span>.name       = name;</div><div class="line">    <span class="keyword">this</span>.identity  = identity;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">String</span> getId() &#123;</div><div class="line">    <span class="built_in">return</span> id;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">String</span> getName() &#123;</div><div class="line">    <span class="built_in">return</span> name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">String</span> getIdentity() &#123;</div><div class="line">    <span class="built_in">return</span> identity;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> setId(<span class="keyword">String</span> id) &#123;</div><div class="line">    <span class="keyword">this</span>.id = id;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> setName(<span class="keyword">String</span> name) &#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> setIdentity(<span class="keyword">String</span> identity) &#123;</div><div class="line">    <span class="keyword">this</span>.identity = identity;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="二、实践结果"><a href="#二、实践结果" class="headerlink" title="二、实践结果"></a>二、实践结果</h3><p>我发现<code>stackoverflow</code>的那个伙计代码写的并没有问题，我把他的代码粘到我本地运行没有一点卡壳。倒不如说他教会了我lombok，在此感谢一下。。嘿嘿</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在stackoverflow上回答问题的时候发现了几个不得了的注解，是我从来没有见过的。然后呢，为了回答别人的问题，我就去查资料了。。。觉得挺有用的，记录一下。。&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="http://blog.xiaomo.info/categories/java/"/>
    
    
      <category term="java" scheme="http://blog.xiaomo.info/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>spring4免费全套视频教程</title>
    <link href="http://blog.xiaomo.info/2016/11/08/JavaSpringVideo/"/>
    <id>http://blog.xiaomo.info/2016/11/08/JavaSpringVideo/</id>
    <published>2016-11-07T16:00:00.000Z</published>
    <updated>2016-11-17T01:30:34.928Z</updated>
    
    <content type="html"><![CDATA[<p>废话不多说，直接上链接。给自己打个mark,如果你需要学习spring又正好转到这里来了，那么恭喜你。<br><a id="more"></a><br><img src="http://static.xiaomo.info/images/java_banner.png" alt="1"></p>
<p>废话不多说，直接上链接。给自己打个mark,如果你需要学习spring又正好转到这里来了，那么恭喜你。<br><a href="http://edu.csdn.net/course/detail/852/" target="_blank" rel="external">国内第1套_Spring4 视频教程</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;废话不多说，直接上链接。给自己打个mark,如果你需要学习spring又正好转到这里来了，那么恭喜你。&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="http://blog.xiaomo.info/categories/java/"/>
    
    
      <category term="java" scheme="http://blog.xiaomo.info/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>日本动漫声优公演,来看看什么叫专业声优</title>
    <link href="http://blog.xiaomo.info/2016/11/07/NihonSeiyou/"/>
    <id>http://blog.xiaomo.info/2016/11/07/NihonSeiyou/</id>
    <published>2016-11-06T16:00:00.000Z</published>
    <updated>2016-11-17T01:30:35.050Z</updated>
    
    <content type="html"><![CDATA[<p>日本动漫声优公演,来看看什么叫专业声优<br><a id="more"></a><br><img src="http://static.xiaomo.info/images/fujisann.png" alt="1"></p>
<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=7,0,19,0" width="400" height="325"><param name="movie" value="http://v.ifeng.com/include/exterior.swf?guid=01da2f75-03cd-4300-b7bc-08bbff884af5&pageurl=http://www.ifeng.com&fromweb=other&AutoPlay=false"><param name="quality" value="high"><param name="allowScriptAccess" value="always"><embed src="http://v.ifeng.com/include/exterior.swf?guid=01da2f75-03cd-4300-b7bc-08bbff884af5&pageurl=http://www.ifeng.com&fromweb=other&AutoPlay=false" quality="high" allowscriptaccess="always" pluginspage="http://www.macromedia.com/go/getflashplayer" type="application/x-shockwave-flash" width="400" height="325"></object>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;日本动漫声优公演,来看看什么叫专业声优&lt;br&gt;
    
    </summary>
    
      <category term="生活" scheme="http://blog.xiaomo.info/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="动漫" scheme="http://blog.xiaomo.info/tags/%E5%8A%A8%E6%BC%AB/"/>
    
  </entry>
  
  <entry>
    <title>spring boot做前后分离时间格式化</title>
    <link href="http://blog.xiaomo.info/2016/11/02/JavaSpringBootDataFormat/"/>
    <id>http://blog.xiaomo.info/2016/11/02/JavaSpringBootDataFormat/</id>
    <published>2016-11-01T16:00:00.000Z</published>
    <updated>2016-11-25T07:30:17.381Z</updated>
    
    <content type="html"><![CDATA[<p>最近在用spring boot 做数据接口时难免遇到时间这类的问题，接口原则：能服务端处理的别留给客户端。客户端的职责就是把服务端的数据完美的展现出来就好了。所以在返回时间的时候最好先进行一下格式化处理，不要返回时间戳格式。<br><a id="more"></a><br><img src="http://static.xiaomo.info/images/java_banner.png" alt="1"></p>
<h3 id="一、写一个Serializer"><a href="#一、写一个Serializer" class="headerlink" title="一、写一个Serializer"></a>一、写一个<code>Serializer</code></h3><p>然后做一个时间格式化的处理</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> info.xiaomo.core.filter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.<span class="type">JsonGenerator</span>;</div><div class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.<span class="type">JsonSerializer</span>;</div><div class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.<span class="type">SerializerProvider</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.<span class="type">IOException</span>;</div><div class="line"><span class="keyword">import</span> java.text.<span class="type">SimpleDateFormat</span>;</div><div class="line"><span class="keyword">import</span> java.util.<span class="type">Date</span>;</div><div class="line"></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">CustomDateSerializer</span> <span class="keyword">extends</span> <span class="title">JsonSerializer&lt;Date&gt;</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    public void serialize(<span class="type">Date</span> value, <span class="type">JsonGenerator</span> jsonGenerator, <span class="type">SerializerProvider</span> provider) <span class="keyword">throws</span> <span class="type">IOException</span> &#123;</div><div class="line">        <span class="type">SimpleDateFormat</span> sdf = <span class="keyword">new</span> <span class="type">SimpleDateFormat</span>(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</div><div class="line">        jsonGenerator.writeString(sdf.format(value));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="二、-使用"><a href="#二、-使用" class="headerlink" title="二、 使用"></a>二、 使用</h3><p>在需要转换的时间的Model中加上这个类,仔细观察下面代码中类型为<code>Date</code>的属性</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> info.xiaomo.core.model.base;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.annotation.JsonSerialize;</div><div class="line"><span class="keyword">import</span> info.xiaomo.core.filter.CustomDateSerializer;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.persistence.*;</div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 把今天最好的表现当作明天最新的起点．．～</div><div class="line"> * いま 最高の表現 として 明日最新の始発．．～</div><div class="line"> * Today the best performance  as tomorrow newest starter!</div><div class="line"> * Created by IntelliJ IDEA.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span>: xiaomo</div><div class="line"> * <span class="doctag">@github</span>: https://github.com/syoubaku</div><div class="line"> * <span class="doctag">@email</span>: hupengbest@163.com</div><div class="line"> * <span class="doctag">@QQ</span>_NO: 83387856</div><div class="line"> * <span class="doctag">@Date</span>: 2016/4/1 20:37</div><div class="line"> * <span class="doctag">@Description</span>: model基类</div><div class="line"> * <span class="doctag">@Copyright</span>(©) 2015 by xiaomo.</div><div class="line"> **/</div><div class="line"></div><div class="line"><span class="meta">@MappedSuperclass</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseModel</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.AUTO)</div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"Id"</span>)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</div><div class="line"></div><div class="line">    <span class="meta">@Version</span></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"Version"</span>)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> version;</div><div class="line"></div><div class="line">    <span class="meta">@JsonSerialize</span>(using = CustomDateSerializer.class)</div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"CreateTime"</span>)</div><div class="line">    <span class="keyword">private</span> Date createTime;</div><div class="line"></div><div class="line">    <span class="meta">@JsonSerialize</span>(using = CustomDateSerializer.class)</div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"UpdateTime"</span>)</div><div class="line">    <span class="keyword">private</span> Date updateTime;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getUpdateTime</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> updateTime;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUpdateTime</span><span class="params">(Date updateTime)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.updateTime = updateTime;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getVersion</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> version;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVersion</span><span class="params">(<span class="keyword">long</span> version)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.version = version;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getCreateTime</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> createTime;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreateTime</span><span class="params">(Date createTime)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.createTime = createTime;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在用spring boot 做数据接口时难免遇到时间这类的问题，接口原则：能服务端处理的别留给客户端。客户端的职责就是把服务端的数据完美的展现出来就好了。所以在返回时间的时候最好先进行一下格式化处理，不要返回时间戳格式。&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="http://blog.xiaomo.info/categories/java/"/>
    
    
      <category term="java" scheme="http://blog.xiaomo.info/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>spring boot做前后分离的跨域问题</title>
    <link href="http://blog.xiaomo.info/2016/11/01/JavaSpringBootCors/"/>
    <id>http://blog.xiaomo.info/2016/11/01/JavaSpringBootCors/</id>
    <published>2016-10-31T16:00:00.000Z</published>
    <updated>2016-11-25T07:30:17.273Z</updated>
    
    <content type="html"><![CDATA[<p>最近在用spring boot 做数据接口供客户端调用时发现存在跨域问题，虽然解决问题有很多。比如用nginx处理等等。但是更方便的是服务端设置一下跨域名。<br><a id="more"></a><br><img src="http://static.xiaomo.info/images/java_banner.png" alt="1"></p>
<h3 id="一、前提"><a href="#一、前提" class="headerlink" title="一、前提"></a>一、前提</h3><h4 id="1-使用spring-boot-maven-构建的项目"><a href="#1-使用spring-boot-maven-构建的项目" class="headerlink" title="1. 使用spring boot + maven 构建的项目"></a>1. 使用spring boot + maven 构建的项目</h4><h3 id="二、设置"><a href="#二、设置" class="headerlink" title="二、设置"></a>二、设置</h3><h4 id="1-写一个过滤器-filter"><a href="#1-写一个过滤器-filter" class="headerlink" title="1. 写一个过滤器(filter)"></a>1. 写一个过滤器(filter)</h4><p>实现Filter接口，然后设置一下响应头。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> info.xiaomo.core.filter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.*;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 把今天最好的表现当作明天最新的起点．．～</div><div class="line"> * いま 最高の表現 として 明日最新の始発．．～</div><div class="line"> * Today the best performance  as tomorrow newest starter!</div><div class="line"> * Created by IntelliJ IDEA.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span>: xiaomo</div><div class="line"> * <span class="doctag">@github</span>: https://github.com/syoubaku</div><div class="line"> * <span class="doctag">@email</span>: hupengbest@163.com</div><div class="line"> * <span class="doctag">@QQ</span>_NO: 83387856</div><div class="line"> * <span class="doctag">@Date</span>: 2016/4/1516:25</div><div class="line"> * <span class="doctag">@Description</span>:</div><div class="line"> * <span class="doctag">@Copyright</span>(©) 2015 by xiaomo.</div><div class="line"> **/</div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CORSFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 初始化</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> filterConfig filterConfig</div><div class="line">     * <span class="doctag">@throws</span> ServletException ServletException</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * CORS 过滤器</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> req   rq</div><div class="line">     * <span class="doctag">@param</span> res   res</div><div class="line">     * <span class="doctag">@param</span> chain chin</div><div class="line">     * <span class="doctag">@throws</span> IOException      IOException</div><div class="line">     * <span class="doctag">@throws</span> ServletException ServletException</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse res, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</div><div class="line">        HttpServletResponse response = (HttpServletResponse) res;</div><div class="line">        response.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</div><div class="line">        response.setHeader(<span class="string">"Access-Control-Allow-Methods"</span>, <span class="string">"POST, GET, OPTIONS, DELETE"</span>);</div><div class="line">        response.setHeader(<span class="string">"Access-Control-Max-Age"</span>, <span class="string">"3600"</span>);</div><div class="line">        response.setHeader(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"Origin, Accept, X-Requested-With, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers, If-Modified-Since"</span>);</div><div class="line">        chain.doFilter(req, res);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 销毁对象</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-在启动器中加入过滤器"><a href="#2-在启动器中加入过滤器" class="headerlink" title="2. 在启动器中加入过滤器"></a>2. 在启动器中加入过滤器</h4><p>实质就是加了一个<code>@bean</code>，然后在启动的时候通过过滤器把所有的响应头设置一下。</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> info.xiaomo.website;</div><div class="line"></div><div class="line"><span class="keyword">import</span> info.xiaomo.core.filter.CORSFilter;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.EnableAutoConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.domain.EntityScan;</div><div class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.ComponentScan;</div><div class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.Configuration;</div><div class="line"><span class="keyword">import</span> org.springframework.<span class="keyword">data</span>.jpa.repository.config.EnableJpaRepositories;</div><div class="line"><span class="keyword">import</span> org.springframework.transaction.<span class="keyword">annotation</span>.EnableTransactionManagement;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.<span class="keyword">annotation</span>.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.<span class="keyword">annotation</span>.RestController;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 把今天最好的表现当作明天最新的起点．．～</div><div class="line"> * いま 最高の表現 として 明日最新の始発．．～</div><div class="line"> * Today the best performance  as tomorrow newest starter!</div><div class="line"> * Created by IntelliJ IDEA.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span>: xiaomo</div><div class="line"> * <span class="doctag">@github</span>: https://github.com/syoubaku</div><div class="line"> * <span class="doctag">@email</span>: hupengbest@163.com</div><div class="line"> * <span class="doctag">@QQ</span>_NO: 83387856</div><div class="line"> * <span class="doctag">@Date</span>: 2016/4/1 15:38</div><div class="line"> * <span class="doctag">@Description</span>: 后台管理启动器</div><div class="line"> * <span class="doctag">@Copyright</span>(©) 2015 by xiaomo.</div><div class="line"> **/</div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@EnableAutoConfiguration</span></div><div class="line"><span class="meta">@ComponentScan(<span class="meta-string">"info.xiaomo"</span>)</span></div><div class="line"><span class="meta">@EntityScan(<span class="meta-string">"info.xiaomo.*.model"</span>)</span></div><div class="line"><span class="meta">@EnableTransactionManagement</span></div><div class="line"><span class="meta">@EnableJpaRepositories(<span class="meta-string">"info.xiaomo.*.dao"</span>)</span></div><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XiaomoMain</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> static void main(String[] args) throws Exception &#123;</div><div class="line">        SpringApplication.run(XiaomoMain.<span class="keyword">class</span>, args);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="keyword">public</span> CORSFilter corsFilter() &#123;</div><div class="line">        <span class="keyword">return</span> new CORSFilter();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping(<span class="meta-string">"/"</span>)</span></div><div class="line">    String index() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Hello World! this is website index"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样一来，客户端就不会存在跨域问题了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在用spring boot 做数据接口供客户端调用时发现存在跨域问题，虽然解决问题有很多。比如用nginx处理等等。但是更方便的是服务端设置一下跨域名。&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="http://blog.xiaomo.info/categories/java/"/>
    
    
      <category term="java" scheme="http://blog.xiaomo.info/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>spring boot相关资料</title>
    <link href="http://blog.xiaomo.info/2016/10/29/JavaSpringZiliao/"/>
    <id>http://blog.xiaomo.info/2016/10/29/JavaSpringZiliao/</id>
    <published>2016-10-28T16:00:00.000Z</published>
    <updated>2016-11-25T07:12:23.955Z</updated>
    
    <content type="html"><![CDATA[<p>spring真是让人又爱又恨呢，好用但是难学。spring铺的又太大，不知道从哪入手。整理点资料，免得头晕。<br><a id="more"></a><br><img src="http://static.xiaomo.info/images/java_banner.png" alt="1"></p>
<h3 id="一、spring-boot-配置相关"><a href="#一、spring-boot-配置相关" class="headerlink" title="一、spring boot 配置相关"></a>一、spring boot 配置相关</h3><h4 id="1-配置文件"><a href="#1-配置文件" class="headerlink" title="1. 配置文件"></a>1. 配置文件</h4><p><a href="http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html" target="_blank" rel="external">properties</a></p>
<h4 id="2-spring-boot-cli-安装和使用"><a href="#2-spring-boot-cli-安装和使用" class="headerlink" title="2. spring boot cli 安装和使用"></a>2. spring boot cli 安装和使用</h4><ol>
<li>下载zip压缩包并解压  </li>
<li>配置环境变量 <code>SPRING_HONE</code> , path里加 <code>%SPRING_HOME%/bin</code></li>
<li><code>spring --version</code> 测试是否成功</li>
<li>帮助 spring –help</li>
<li>生成项目 spring init project_name</li>
</ol>
<h4 id="3-spring-boot首页"><a href="#3-spring-boot首页" class="headerlink" title="3. spring boot首页"></a>3. <a href="http://projects.spring.io/spring-boot/" target="_blank" rel="external">spring boot首页</a></h4><h4 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h4><h3 id="二、spring-boot-常见错误"><a href="#二、spring-boot-常见错误" class="headerlink" title="二、spring boot 常见错误"></a>二、spring boot 常见错误</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;spring真是让人又爱又恨呢，好用但是难学。spring铺的又太大，不知道从哪入手。整理点资料，免得头晕。&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="http://blog.xiaomo.info/categories/java/"/>
    
    
      <category term="java" scheme="http://blog.xiaomo.info/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Maven 与 IntelliJ IDEA 的完美结合</title>
    <link href="http://blog.xiaomo.info/2016/10/28/JavaIdeaMaven/"/>
    <id>http://blog.xiaomo.info/2016/10/28/JavaIdeaMaven/</id>
    <published>2016-10-27T16:00:00.000Z</published>
    <updated>2016-11-25T07:12:23.418Z</updated>
    
    <content type="html"><![CDATA[<p>你是否正在学习Maven？是否因为Maven难用而又不得不用而苦恼？是否对Eclipse于Maven的冲突而困惑？ 那么我告诉你一个更直接更简单的解决方案: IntelliJ IDEA！<br><a id="more"></a><br><img src="http://static.xiaomo.info/images/java_banner.png" alt="1"></p>
<h3 id="1-什么是-Maven，为什么要使用-Maven-而不是-Ant"><a href="#1-什么是-Maven，为什么要使用-Maven-而不是-Ant" class="headerlink" title="1. 什么是 Maven，为什么要使用 Maven 而不是 Ant"></a>1. 什么是 Maven，为什么要使用 Maven 而不是 Ant</h3><p>Maven简单来说是一个项目管理工具，被认为是Ant的替代品或者继任者。事实上Maven的功能要远远超出Ant，它不仅仅提供编译的脚本，更是在整 个项目周期中提供测试，发布，文档生成等功能，并且有着独特的依赖性管理方法。但是强大的功能的代价就是复杂的使用方法，第一次使用Maven往往需要将 近半个小时的时间（国内网速）来下载一个本地的依赖库，这无疑会使很多开发人员“知难而退”。虽然广受诟病，一个不争的事实就是Maven逐渐代替了 Ant，使用Maven也成了Java开发人员的一个必要技能。</p>
<h3 id="2-IntelliJ-IDEA-与-Eclipse"><a href="#2-IntelliJ-IDEA-与-Eclipse" class="headerlink" title="2. IntelliJ IDEA 与 Eclipse"></a>2. IntelliJ IDEA 与 Eclipse</h3><p>在Java的世界里，Eclipse毋庸置疑是IDE中的王者，IntelliJ IDEA和NetBeans都只能生活在Eclipse的光环下。Eclipse的强大已经不用我多说了，但其实IntelliJ IDEA也是一个相当优秀的IDE，尤其体现在它的智能上。它的一个针对.Net的Clone产品ReSharper已经被越来越多的C#开发者所接受。 IntelliJ IDEA提供了大量的智能规则来协助开发者，类似代码补全，用法的转换，格式的提示等等，当你习惯以后，你就会对那个小灯泡爱不释手。</p>
<h3 id="3-选择-Maven-IntelliJ-IDEA-的理由"><a href="#3-选择-Maven-IntelliJ-IDEA-的理由" class="headerlink" title="3. 选择 Maven + IntelliJ IDEA 的理由"></a>3. 选择 Maven + IntelliJ IDEA 的理由</h3><p>之所以要选择IntelliJ IDEA，是因为Maven+Eclipse实在太难用了。Eclipse有两个Maven插件 m2eclipse 和 Eclipse IAM。但是由于Eclipse和Maven设计上的矛盾，这两个插件可能都达不到你想要的效果。m2eclipse 会把你所有类型的项目都视为Maven类型项目，这对于一个单纯的Java项目或许可以，对于一个JEE或者WEB项目都是一场灾难。Eclipse IAM 并不会改变你的项目类型，但是他提供的功能也就仅仅限于编辑和运行POM文件了，甚至连依赖性都管理不了。相比之下，如果你非要用Eclipse的话我还 是推荐你使用Eclipse IAM。Eclipse想要完美的支持Maven恐怕需要在底层设计上做一些改变，无论是代码规范，项目结构规范和依赖性管理上，都有着不可调和的矛盾。 显然，在这方面IntelliJ IDEA做的要好的多，以至于你很难说出对它的不满。</p>
<h3 id="4-Maven-IntelliJ-IDEA-的优势"><a href="#4-Maven-IntelliJ-IDEA-的优势" class="headerlink" title="4. Maven + IntelliJ IDEA 的优势"></a>4. Maven + IntelliJ IDEA 的优势</h3><h4 id="一切都是Module："><a href="#一切都是Module：" class="headerlink" title="一切都是Module："></a>一切都是Module：</h4><pre><code>IntelliJ IDEA借鉴的Maven的概念，不在采取Eclipse里Project的概念，一切都是Module。无论是否使用Maven，你的项目都是一个独立 的Module。并且你可以混搭使用Maven Module和普通的Java Module，两者可以和谐共存。
</code></pre><h4 id="支持Multi-module："><a href="#支持Multi-module：" class="headerlink" title="支持Multi-module："></a>支持Multi-module：</h4><pre><code>可以说Maven的项目结构设计是非常严格的，现实应用中你必须用到Parent-Child的模式。Eclipse由于不支持在一个Project上建 立Sub-Project，因此无论如何目前都不能实现。IntelliJ IDEA可以完美的实现这个设计，并且无论是Module属性里，还是彼此的依赖性上都不会出现问题。
</code></pre><h4 id="更方便的生命周期操作："><a href="#更方便的生命周期操作：" class="headerlink" title="更方便的生命周期操作："></a>更方便的生命周期操作：</h4><pre><code>比起Eclipse通通放进右键菜单的行为，IntelliJ IDEA有着单独的窗口可以完成Maven的操作。你可以针对不同Module进行 Clean Compile Package Install等操作，各个Plug-in的操作也一清二楚。
</code></pre><h4 id="完美的依赖性管理："><a href="#完美的依赖性管理：" class="headerlink" title="完美的依赖性管理："></a>完美的依赖性管理：</h4><pre><code>由于Maven会把所有依赖的包放在本机的一个目录下，所以实际上是脱离Project本身存在的。IntelliJ IDEA引入了一个External Library的概念，所有的Maven依赖性都会放在这里，和项目自带的库区分开。并且Module之间会智能的判断，你不需要Maven Install来进行引用代码的更新。
</code></pre><h4 id="动态更新："><a href="#动态更新：" class="headerlink" title="动态更新："></a>动态更新：</h4><pre><code>每当Maven相关的设置更改时，例如修改了pom的依赖性，添加删除Module，IntelliJ IDEA会提示你进行更新。这种更新实际上就是运行了Maven，所以你不许要手动运行Maven Compile来进行更新，也不会像Eclipse里遇到莫名其妙的问题。
</code></pre><h3 id="5-Maven-安装"><a href="#5-Maven-安装" class="headerlink" title="5. Maven 安装"></a>5. Maven 安装</h3><p>到<a href="http://maven.apache.org/download.html" target="_blank" rel="external">http://maven.apache.org/download.html</a> 下载最新的Maven版本，我下载的版本为最新的apache-maven-3.0.4。推荐使用最新的Maven 3，因为比以前的Maven 2性能更好，而且完全兼容Maven 2。</p>
<p>下载好以后，解压到一个目录，我的目录为 D:\apache-maven-3.0.4，接着配置Maven环境变量M2_HOME为你解压的目录，如下图新建M2_HOME变量并追加到Path后面：</p>
<p>如果要在CMD控制台运行Maven命令的话，还需要配置Jdk环境变量，因为我接下来的操作都是基于IntelliJ IDEA，所以就不用配置JDK环境变量。</p>
<h3 id="6-Maven-与IntelliJ-IDEA完美使用（基于IntelliJ-IDEA-12）"><a href="#6-Maven-与IntelliJ-IDEA完美使用（基于IntelliJ-IDEA-12）" class="headerlink" title="6. Maven 与IntelliJ IDEA完美使用（基于IntelliJ IDEA 12）"></a>6. Maven 与IntelliJ IDEA完美使用（基于IntelliJ IDEA 12）</h3><p>打开IntelliJ IDEA，新建一个Maven项目，如下图，项目名称为mymaven</p>
<p>选择Maven模版</p>
<p>创建过程中，配置Maven主目录</p>
<p>创建好后的目录结构如下图，IDEA创建了src/main/resources（自动创建）、src/main/java（手动创建）、src/main/test（手动创建）、以及pom.xml文件（自动创建）</p>
<p>按照Maven约定，项目的主目录位于src/main/resources、src/main/java中，测试目录位于src/main/test 中，所以我们在最终打包项目的时候，只包含主目录代码，不会包含测试目录里的代码，而测试目录里的代码只会在测试时候用到。</p>
<p>最后pom.xml这个文件是我们Maven项目的核心文件，POM(Project Object Model，项目对象模型)定义了项目的基本信息，用于描述项目如何构建，声明项目依赖。</p>
<p>project：是xml文件的根元素，我们主要关心根元素下的子元素<br>modelVersion：定义了当前POM模型的版本，Maven 2 或Maven 3 只能是4.0.0<br>groupId：定义了项目属于哪个组，一般来说这个网网和公司或组织关联，比如说，你所在的公司为mycom.那就应该定义为com.mycom.mymaven，mymaven为项目名称<br>artifactId：定 义了当前Maven项目在组中的唯一id，例如HelloMaven这个项目，我则把他定义为hello-maven，还例如spring项目，他的 groupId为org.springframework，对于content项目来说artifactId则为spring-content，web项 目则为spring-web</p>
<p>最后我们使用IntelliJ IDEA来用Maven编译我们的代码，打开Maven Projects菜单，如图，选中clean、compile并右键点击Run ‘hello-maven[clean,compile]’按钮即可。</p>
<p>根据输出结果我们看到，clean命令让Maven先清理target目录，Maven一般认为项目的输出目录为target，然后执行resource任务，现在为定义项目资源，所以暂时略过，最后执行编译任务！ </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;你是否正在学习Maven？是否因为Maven难用而又不得不用而苦恼？是否对Eclipse于Maven的冲突而困惑？ 那么我告诉你一个更直接更简单的解决方案: IntelliJ IDEA！&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="http://blog.xiaomo.info/categories/java/"/>
    
    
      <category term="java" scheme="http://blog.xiaomo.info/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>使用Servlet做简单的上传功能</title>
    <link href="http://blog.xiaomo.info/2016/10/24/JavaServletUpload/"/>
    <id>http://blog.xiaomo.info/2016/10/24/JavaServletUpload/</id>
    <published>2016-10-23T16:00:00.000Z</published>
    <updated>2016-11-25T07:30:17.354Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章主要为大家详细介绍了java基于servlet实现上传功能，后台使用java实现，前端主要是jsp，感兴趣的小伙伴们可以参考一下<br><a id="more"></a><br><img src="http://static.xiaomo.info/images/java_banner.png" alt="1"></p>
<h3 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h3><h4 id="1-1-jar包"><a href="#1-1-jar包" class="headerlink" title="1.1 jar包"></a>1.1 jar包</h4><p><code>servlet-api</code> 是servlet的核心api包<br><code>commons-fileupload</code> 上传功能的通用工具包<br><code>fastjson</code> 阿里的json工具包</p>
<h3 id="1-2-pom文件"><a href="#1-2-pom文件" class="headerlink" title="1.2 pom文件"></a>1.2 pom文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="二、项目介绍"><a href="#二、项目介绍" class="headerlink" title="二、项目介绍"></a>二、项目介绍</h3><h4 id="1-1-web-xml配置"><a href="#1-1-web-xml配置" class="headerlink" title="1.1 web.xml配置"></a>1.1 web.xml配置</h4><p>此项目是采用maven构建的java web项目，传统的jsp作为页面交互。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span></div><div class="line">            org.apache.commons.fileupload.servlet.FileCleanerCleanup</div><div class="line">        <span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>FileUploadServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>FileUploadServlet<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>FileUploadServlet<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.ghj.servlet.FileUploadServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>FileUploadServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/FileUploadServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></div></pre></td></tr></table></figure>
<p>配置的servlet的位置，那么我们就要去写代码了。</p>
<h4 id="1-2-上传功能"><a href="#1-2-上传功能" class="headerlink" title="1.2 上传功能"></a>1.2 上传功能</h4><p>新建一个class文件<code>com.ghj.servlet.FileUploadServlet</code>，继承自<code>HttpServlet</code>。重写它的<code>init()</code>和<code>doPost()</code>方法。</p>
<p>代码</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.ghj.servlet;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONArray;</div><div class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</div><div class="line"><span class="keyword">import</span> org.apache.commons.fileupload.FileItem;</div><div class="line"><span class="keyword">import</span> org.apache.commons.fileupload.disk.DiskFileItemFactory;</div><div class="line"><span class="keyword">import</span> org.apache.commons.fileupload.servlet.FileCleanerCleanup;</div><div class="line"><span class="keyword">import</span> org.apache.commons.fileupload.servlet.ServletFileUpload;</div><div class="line"><span class="keyword">import</span> org.apache.commons.io.FileCleaningTracker;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</div><div class="line"><span class="keyword">import</span> javax.servlet.ServletException;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"><span class="keyword">import</span> java.io.<span class="keyword">File</span>;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.PrintWriter;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 把今天最好的表现当作明天最新的起点．．～</div><div class="line"> * いま 最高の表現 として 明日最新の始発．．～</div><div class="line"> * Today the best performance  as tomorrow newest starter!</div><div class="line"> * Created by IntelliJ IDEA.</div><div class="line"> *</div><div class="line"> * @author: xiaomo</div><div class="line"> * @github: https://github.com/soubaku</div><div class="line"> * @email: hupengbest@163.com</div><div class="line"> * @QQ_NO: 83387856</div><div class="line"> * @Date: 2016/10/24 9:15.</div><div class="line"> * @Description:</div><div class="line"> * @Copyright(©) 2016 by xiaomo.</div><div class="line"> **/</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> FileUploadServlet <span class="keyword">extends</span> HttpServlet &#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1</span>L;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">File</span> fileUploadPath;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String fileDirectory = <span class="string">"/data"</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 设置文件存储位置</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> init() &#123;</div><div class="line">        String realPath = <span class="keyword">this</span>.getServletConfig().getServletContext().getRealPath(<span class="string">"/"</span>);</div><div class="line">        fileUploadPath = <span class="keyword">new</span> <span class="keyword">File</span>(realPath + fileDirectory);</div><div class="line">        <span class="keyword">if</span> (!fileUploadPath.exists()) &#123;</div><div class="line">            <span class="keyword">boolean</span> isCreate = fileUploadPath.mkdirs();</div><div class="line">            <span class="keyword">if</span> (isCreate) &#123;</div><div class="line">                System.out.<span class="keyword">println</span>(<span class="string">"文件夹己被创建"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * post请求(文件上传的操作)</div><div class="line">     * 说明：该方法支持同时上传多个文件（在index.jsp中添加文件上传的控件）</div><div class="line">     * 注意：文件名只能为英文</div><div class="line">     *</div><div class="line">     * @param request  request</div><div class="line">     * @param response response</div><div class="line">     * @throws ServletException ServletException</div><div class="line">     * @throws IOException      IOException</div><div class="line">     */</div><div class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> doPost(HttpServletRequest request, HttpServletResponse response) <span class="keyword">throws</span> ServletException, IOException &#123;</div><div class="line">        <span class="keyword">boolean</span> isMultipart = ServletFileUpload.isMultipartContent(request);</div><div class="line">        <span class="keyword">if</span> (isMultipart) &#123;</div><div class="line">            ServletContext servletContext = <span class="keyword">this</span>.getServletConfig().getServletContext();</div><div class="line">            <span class="keyword">File</span> repository = (<span class="keyword">File</span>) servletContext.getAttribute(<span class="string">"javax.servlet.context.tempdir"</span>);</div><div class="line">            DiskFileItemFactory factory = newDiskFileItemFactory(servletContext, repository);</div><div class="line"></div><div class="line">            ServletFileUpload upload = <span class="keyword">new</span> ServletFileUpload(factory);</div><div class="line">            upload.setHeaderEncoding(<span class="string">"utf-8"</span>);</div><div class="line"></div><div class="line">            PrintWriter printWriter = response.getWriter();</div><div class="line">            response.setContentType(<span class="string">"application/json"</span>);</div><div class="line">            response.setCharacterEncoding(<span class="string">"utf-8"</span>);</div><div class="line">            JSONArray files = <span class="keyword">new</span> JSONArray();</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                List&lt;FileItem&gt; items = upload.parseRequest(request);</div><div class="line">                <span class="keyword">for</span> (FileItem item : items) &#123;</div><div class="line">                    <span class="keyword">if</span> (item.isFormField()) &#123; <span class="comment">//表单输入域</span></div><div class="line">                        System.out.<span class="keyword">println</span>(item.getFieldName());</div><div class="line">                    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 文件上传域</span></div><div class="line">                        String name = item.getName();</div><div class="line">                        <span class="keyword">if</span> (!name.equals(<span class="string">""</span>)) &#123;</div><div class="line">                            <span class="keyword">int</span> index = name.indexOf(<span class="string">"\\"</span>);</div><div class="line">                            <span class="keyword">File</span> uploadedFile;</div><div class="line">                            <span class="keyword">if</span> (index == -<span class="number">1</span>) &#123;</div><div class="line">                                uploadedFile = <span class="keyword">new</span> <span class="keyword">File</span>(fileUploadPath,</div><div class="line">                                        <span class="keyword">File</span>.separator + name);</div><div class="line">                            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                                uploadedFile = <span class="keyword">new</span> <span class="keyword">File</span>(fileUploadPath, <span class="keyword">File</span>.separator + name.substring(name.lastIndexOf(<span class="keyword">File</span>.separator) + <span class="number">1</span>));</div><div class="line">                            &#125;</div><div class="line">                            item.<span class="keyword">write</span>(uploadedFile);</div><div class="line">                            JSONObject <span class="keyword">file</span> = <span class="keyword">new</span> JSONObject();</div><div class="line">                            <span class="keyword">file</span>.put(<span class="string">"name"</span>, name);</div><div class="line">                            <span class="keyword">file</span>.put(<span class="string">"size"</span>, item.getSize());</div><div class="line">                            <span class="keyword">file</span>.put(<span class="string">"url"</span>, fileUploadPath + <span class="string">"/"</span> + name);</div><div class="line">                            <span class="keyword">file</span>.put(<span class="string">"deleteType"</span>, <span class="string">"post"</span>);</div><div class="line">                            files.add(<span class="keyword">file</span>);</div><div class="line">                        &#125; <span class="keyword">else</span> &#123;</div><div class="line">                            JSONObject <span class="keyword">file</span> = <span class="keyword">new</span> JSONObject();</div><div class="line">                            <span class="keyword">file</span>.put(<span class="string">"result"</span>, <span class="string">"please choose a file"</span>);</div><div class="line">                            files.add(<span class="keyword">file</span>);</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                JSONObject result = <span class="keyword">new</span> JSONObject();</div><div class="line">                result.put(<span class="string">"files"</span>, files);</div><div class="line">                printWriter.<span class="keyword">write</span>(result.toString());</div><div class="line">                printWriter.close();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 将请求的每个项目封装成单独的文件项目</div><div class="line">     *</div><div class="line">     * @param context    context</div><div class="line">     * @param repository repository</div><div class="line">     * @return DiskFileItemFactory</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> DiskFileItemFactory newDiskFileItemFactory(ServletContext context, <span class="keyword">File</span> repository) &#123;</div><div class="line">        FileCleaningTracker fileCleaningTracker = FileCleanerCleanup.getFileCleaningTracker(context);</div><div class="line">        DiskFileItemFactory factory = <span class="keyword">new</span> DiskFileItemFactory(DiskFileItemFactory.DEFAULT_SIZE_THRESHOLD, repository);</div><div class="line">        factory.setFileCleaningTracker(fileCleaningTracker);</div><div class="line">        <span class="keyword">return</span> factory;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-3-页面"><a href="#2-3-页面" class="headerlink" title="2.3 页面"></a>2.3 页面</h4><figure class="highlight erb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">%</span></span><span class="ruby">@page pageEncoding=<span class="string">"UTF-8"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span> </span><span class="xml"><span class="tag">%&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>文件上传<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"FileUploadServlet"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file1"</span>"&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"submit"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>看起来清新简单，就不加那么style的修饰了。</p>
<h3 id="三、效果图"><a href="#三、效果图" class="headerlink" title="三、效果图"></a>三、效果图</h3><p><img src="http://static.xiaomo.info/images/java_upload.gif" alt="效果图"></p>
<h3 id="四、源代码"><a href="#四、源代码" class="headerlink" title="四、源代码"></a>四、源代码</h3><p><a href="https://github.com/java-user/ServletFileUploadDemo" target="_blank" rel="external">https://github.com/java-user/ServletFileUploadDemo</a>  需要的朋友自取，随意使用不用客气</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章主要为大家详细介绍了java基于servlet实现上传功能，后台使用java实现，前端主要是jsp，感兴趣的小伙伴们可以参考一下&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="http://blog.xiaomo.info/categories/java/"/>
    
    
      <category term="java" scheme="http://blog.xiaomo.info/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>喜欢的动漫</title>
    <link href="http://blog.xiaomo.info/2016/10/08/NihonAnime/"/>
    <id>http://blog.xiaomo.info/2016/10/08/NihonAnime/</id>
    <published>2016-10-07T16:00:00.000Z</published>
    <updated>2016-11-25T07:12:23.900Z</updated>
    
    <content type="html"><![CDATA[<p>二次元为我们描绘了一个不一样的世界，一群有着精彩故事的人，还有视觉听觉上的双重享受。不是很美妙吗？我们还能从二次元里获得力量、勇气、热情、梦想，懂得坚持、友爱、乐观、努力。二次元正是人类的伟大创造。<br><a id="more"></a><br><img src="http://static.xiaomo.info/images/dongli3.jpg" alt="1"></p>
<h3 id="一、アニメ"><a href="#一、アニメ" class="headerlink" title="一、アニメ"></a>一、<a href="https://zh.moegirl.org" target="_blank" rel="external">アニメ</a></h3><table>
<thead>
<tr>
<th style="text-align:center">名前</th>
<th style="text-align:center">コメント</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">东离剑游记</td>
<td style="text-align:center">東离剣の遊記</td>
</tr>
<tr>
<td style="text-align:center">NEW GAME！</td>
<td style="text-align:center">NEW GAME！</td>
</tr>
<tr>
<td style="text-align:center">刀剑神域</td>
<td style="text-align:center">ソードアート・オンライン</td>
</tr>
<tr>
<td style="text-align:center">全职猎人</td>
<td style="text-align:center">ハンター×ハンター</td>
</tr>
<tr>
<td style="text-align:center">寄生兽</td>
<td style="text-align:center">寄生獣</td>
</tr>
<tr>
<td style="text-align:center">星之梦</td>
<td style="text-align:center">星の夢</td>
</tr>
<tr>
<td style="text-align:center">Fate/Zero</td>
<td style="text-align:center">フェイト/ゼロ</td>
</tr>
<tr>
<td style="text-align:center">妖精的尾巴</td>
<td style="text-align:center">フェアリーテイル</td>
</tr>
<tr>
<td style="text-align:center">命运石之门</td>
<td style="text-align:center">シュタインズゲート</td>
</tr>
<tr>
<td style="text-align:center">線上遊戲的老婆不可能是女生？</td>
<td style="text-align:center">ネトゲの嫁は女の子じゃないと思った？</td>
</tr>
<tr>
<td style="text-align:center">Re:从零开始的异世界生活</td>
<td style="text-align:center">Re:ゼロから始める異世界生活</td>
</tr>
<tr>
<td style="text-align:center">干物妹小埋</td>
<td style="text-align:center">干物妹！うまるちゃん</td>
</tr>
<tr>
<td style="text-align:center">遊戲人生</td>
<td style="text-align:center">ノーゲーム・ノーライフ</td>
</tr>
<tr>
<td style="text-align:center">夏目友人帐</td>
<td style="text-align:center">なつめ　ゆうじんちょう</td>
</tr>
<tr>
<td style="text-align:center">寒蝉鸣泣之时</td>
<td style="text-align:center">ひぐらしのなく頃に</td>
</tr>
<tr>
<td style="text-align:center">未来日记</td>
<td style="text-align:center">未来日记</td>
</tr>
<tr>
<td style="text-align:center">加速世界</td>
<td style="text-align:center">アクセル・ワールド</td>
</tr>
<tr>
<td style="text-align:center">Charlotte</td>
<td style="text-align:center">Charlotte</td>
</tr>
<tr>
<td style="text-align:center">笨蛋测验召唤兽</td>
<td style="text-align:center">バカとテストと召喚獣</td>
</tr>
<tr>
<td style="text-align:center">心理测量者</td>
<td style="text-align:center">サイコパス</td>
</tr>
<tr>
<td style="text-align:center">CLANNAD</td>
<td style="text-align:center">CLANNAD</td>
</tr>
<tr>
<td style="text-align:center">AIR</td>
<td style="text-align:center">AIR</td>
</tr>
<tr>
<td style="text-align:center">KANON</td>
<td style="text-align:center">KANON</td>
</tr>
</tbody>
</table>
<h3 id="二、ドラマ"><a href="#二、ドラマ" class="headerlink" title="二、ドラマ"></a>二、ドラマ</h3><table>
<thead>
<tr>
<th style="text-align:center">名前</th>
<th style="text-align:center">コメント</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">孝忠八犬</td>
<td style="text-align:center">なし</td>
</tr>
<tr>
<td style="text-align:center">成濑巳喜男</td>
<td style="text-align:center">なし</td>
</tr>
<tr>
<td style="text-align:center">小栗康平的泥之河</td>
<td style="text-align:center">なし</td>
</tr>
<tr>
<td style="text-align:center">小津安二郎</td>
<td style="text-align:center">なし</td>
</tr>
<tr>
<td style="text-align:center">娄烨是才子</td>
<td style="text-align:center">なし</td>
</tr>
<tr>
<td style="text-align:center">彗星来的那一夜</td>
<td style="text-align:center">なし</td>
</tr>
<tr>
<td style="text-align:center">堂吉诃德</td>
<td style="text-align:center">なし</td>
</tr>
<tr>
<td style="text-align:center">对不起青春</td>
<td style="text-align:center">なし</td>
</tr>
<tr>
<td style="text-align:center">nana</td>
<td style="text-align:center">なし</td>
</tr>
</tbody>
</table>
<h3 id="三、映画"><a href="#三、映画" class="headerlink" title="三、映画"></a>三、映画</h3><table>
<thead>
<tr>
<th style="text-align:center">名前</th>
<th style="text-align:center">コメント</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">千与千寻</td>
<td style="text-align:center">千と千尋の神隠し</td>
</tr>
<tr>
<td style="text-align:center">となりのトトロ</td>
<td style="text-align:center">となりのトトロ</td>
</tr>
<tr>
<td style="text-align:center">你的名字</td>
<td style="text-align:center">君のなまえは？</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;二次元为我们描绘了一个不一样的世界，一群有着精彩故事的人，还有视觉听觉上的双重享受。不是很美妙吗？我们还能从二次元里获得力量、勇气、热情、梦想，懂得坚持、友爱、乐观、努力。二次元正是人类的伟大创造。&lt;br&gt;
    
    </summary>
    
      <category term="生活" scheme="http://blog.xiaomo.info/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活" scheme="http://blog.xiaomo.info/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>生活习惯的不同，造就了丰富多彩的世界</title>
    <link href="http://blog.xiaomo.info/2016/08/28/NihonSekaku/"/>
    <id>http://blog.xiaomo.info/2016/08/28/NihonSekaku/</id>
    <published>2016-08-27T16:00:00.000Z</published>
    <updated>2016-11-25T07:12:23.749Z</updated>
    
    <content type="html"><![CDATA[<p>にほんのライフスタイルに<br><a id="more"></a><br><img src="http://static.xiaomo.info/images/fujisann.png" alt="1"></p>
<ul>
<li>不喜欢用蓝色圆珠笔。蓝色圆珠笔只在作标记的场合使用。</li>
<li>香烟吸一半就扔掉。有的人烟瘾大，吸两个半支烟，而不是吸一个整支。</li>
<li>日本人不太在意姓的意思。在中国人看来日本人的姓稀奇古怪。一次我去开会签到，抬头一看接待小姐的姓是“我孙子”。还有人姓厕所（御手洗）。很多姓是地名，“大阪”“名古屋”“涩谷”都见过。还有四个字的姓，如最近的丑闻作曲家姓“佐村河内”。</li>
<li>日本人不忌讳鬼、地狱、幽灵。含“鬼”字的地名有很多，叫“地狱”的拉面店也见到过。</li>
<li>不把跪着视为低人一等。因为跪着比蹲着省力，经常看到日本人跪着工作。例如，在没有椅子的时候，跪着操作电脑，高度正好。</li>
<li>如果第二天下午开会，日本人前一天晚上就不吃韭菜了。</li>
<li>如果感冒了，一定带口罩，即使不是流行性感冒也怕别人忌讳。</li>
<li>不使用非常浓的香水。无香料的化妆品很受欢迎。</li>
<li>不会打听别人的衣服、物品多少钱买的。</li>
<li>不会和别人勾肩搭背，即使是好朋友。</li>
<li>女士吃面包点心时，用手掰下一块放到嘴里，不会直接咬。（可能认为这样吃比较体面。）</li>
<li>吸烟时不劝烟，聚餐时不劝酒，更不会把人灌醉。</li>
<li>不轻易把谁称为自己的朋友，交往了几十年还把对方称为“知人”。对自来熟，刚见面就称朋友的人不喜欢。</li>
<li>不会轻易触摸别人的肌肤，即使是同性。对拉拉手的亲热和拍拍肩的关心不接受。</li>
<li>不打听别人的家事，更不要说隐私。在一起工作十几年，不知道对方有几个兄弟姐妹。福原爱在接受日本媒体的采访时说，中国记者什么都问，问得直想哭。</li>
<li>不轻易交换电话号码。我们公司的部长课长之间，甚至也有不知道对方电话号码的人。</li>
<li>日本人的胃口很小，初到日本的中国留学生（男生）在学校食堂一份定食大部分吃不饱。</li>
<li>在工作场合绝不穿张扬的服装。一般60岁以上的人开始穿红色的花的衣服。</li>
<li>工作场合不可吃东西，但可以吃水果糖。</li>
<li>工作时间不可接私人电话。个人不能使用公家电话打出去，也不能打进来。</li>
<li>私人的信件和物品不能寄到公司。</li>
<li>在家里高声说话，邻居会到家中提出警告。</li>
<li>泡温泉以前要先洗净身子。</li>
<li>如果你送给日本人点心，对方说真好吃。千万不要信以为真。是真是假得在其他的场合验证。</li>
<li>日本的绿茶泡一分钟就可以喝。</li>
<li>把手插到衣服裤子口袋里，被认为是对对方不尊敬。张艺谋拍的《千里走单骑》电影里的女日语翻译，很多场面把手放在口袋里，感觉不舒服。</li>
<li>日本人没有抱肘的习惯，认为这个姿势显示傲慢。</li>
<li>行人过马路遇到红灯必停，即使绿灯侧没有车。本人这种情况走过，被旁边的车“嘀”过。日本人说，这样做的目的是，告诉孩子，有法必依。</li>
<li>开车时，后灯双闪，是表示对后车的感谢。常在别人给让路后使用。</li>
<li>对面的车前灯瞬闪，表示给你让路。</li>
<li>公司业务关系新年拜年，带的礼品基本就是两条毛巾。</li>
<li>公司来两伙客人，一方是得到工作的上家，一方是外协的下家，在一个接待室谈话。只给上家上茶，下家没有。</li>
<li>公司来客，不管是什么工作关系，到吃饭时间基本都不提供午饭。</li>
<li>工作中出现差错，再好的朋友都不会说一句同情的话。有再多的客观原因也没人体谅。如果争辩解释，被认为错上加错。</li>
<li>企业一般都有自己的日历，根据客户的日历制定，国家法定假日常常有不休息的时候。</li>
<li>企业的年假，日本人一般不休，很少利用年假去旅游。</li>
<li>日本人工作比较配合，部门之间扯皮的事很少。</li>
<li>日本人的习惯是报忧不报喜，看电视听领导讲话，没有大好形势。</li>
<li>日本的电视广告很好看，没有太长时间的广告，幽默让人不厌倦。例，一个美女到动物店说想买一条狗，两只老虎，三头狮子。旁边的顾客惊得把手包都掉到了地上。店主问为什么，她说，单身女子在家害怕，每个房间都要有猛兽守卫。这时画外音，有比这还安全的，“家用电子警备系统”。</li>
<li>日本不光小孩看漫画，动画片，大人也很爱看。</li>
<li>店铺开业，门前摆放的祝贺物品，简直就可以说是中国追悼会上的花圈。</li>
<li>传统文化节，很多人穿的衣服上印着“祭”字。在日本，“祭”字的意思是文化节。</li>
<li>日本的医院对消炎药的使用严格控制，但相对而言，对激素的使用比较放松。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;にほんのライフスタイルに&lt;br&gt;
    
    </summary>
    
      <category term="生活" scheme="http://blog.xiaomo.info/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活" scheme="http://blog.xiaomo.info/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>《东离剑游记》</title>
    <link href="http://blog.xiaomo.info/2016/08/24/BangumiDongli/"/>
    <id>http://blog.xiaomo.info/2016/08/24/BangumiDongli/</id>
    <published>2016-08-23T16:00:00.000Z</published>
    <updated>2016-11-25T07:12:23.484Z</updated>
    
    <content type="html"><![CDATA[<p>这两天看了一部神奇的动漫，具有强烈的武侠风。现在循环听练听力。然而你一定想不到这部动漫是多么的让人惊喜。<br><a id="more"></a></p>
<h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h3><p>这是一次打破当前布袋戏模式的局限的冒险和挑战。关键的变化主要在三点：</p>
<h4 id="第一"><a href="#第一" class="headerlink" title="第一"></a>第一</h4><p>剧本作者由日本的虚渊玄担任，虚的创作水平有目共睹，保守的说，当不在目前布袋戏圈内最出色的编剧三弦之下，甚至只会更高，这实际上有效的补完了霹雳近年来剧本疲弱的短板，把最弱点变成了最强点。<br>但水平是一方面，文化属性则是另一方面，从东离的第一集看，比如一些人物特质，就明显少了几分霹雳和金光的中国侠客味道，而多了几分日本武士的感觉，这种改变实际上让东离剑在文化意识领域有些脱离了承载着传统文化的布袋戏，而接近了日本动画的范畴。</p>
<h4 id="第二"><a href="#第二" class="headerlink" title="第二"></a>第二</h4><p>是配音从单人中文口白变成了日语声优配音，但霹雳似乎也同时提供了台语配音版？这就如同当年的可口可乐的营销手法一样，新老同出，这在创新的同时很大程度上减少了风险，应是一个很明智的选择。</p>
<h4 id="第三"><a href="#第三" class="headerlink" title="第三"></a>第三</h4><p>是东离的单集时长从过往的六十分钟以上变成了日本动画的二十三分钟，它在能让编剧和制作人员更有效的凝练和提升质量的同时，却也可能带来一些节奏的变化，让旧观众产生一定的不适应感，比如我至今仍对东离的木偶与台词的配合，木偶动作和战斗画面的结合有点不适。<br>总而言之，东离比较像一个嫁接品，有点像是在布袋戏的树干里插入了一个日本动画的灵魂，同时在枝叶上嫁接了日本动画的设计和手法，所以霹雳的“偶动漫”这个说法，正如苹果梨一样，我以为是很贴切的，其味道好不好吃，是不是能在保留苹果的精髓的同时加入梨子的优点，是不是能在让吃苹果的人满意的同时吸引一群喜欢吃梨子的人，还是搞砸了，弄得似是而非，两头都不满意，这个目前下结论为时尚早，但无论如何，仅凭这个剧作本身，它已毫无疑问是布袋戏圈的一大突破性创举，对于勇于探索向前的人和行为，无论其最终成败如何，我以为作为观众，我们都是该有一种开阔的心态，而抱持一份最起码的支持和敬意的。</p>
<h3 id="二、-插画"><a href="#二、-插画" class="headerlink" title="二、 插画"></a>二、 插画</h3><p><img src="http://static.xiaomo.info/images/dongli1.jpg" alt="1"><br><img src="http://static.xiaomo.info/images/dongli2.jpg" alt="1"><br><img src="http://static.xiaomo.info/images/dongli3.jpg" alt="1"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这两天看了一部神奇的动漫，具有强烈的武侠风。现在循环听练听力。然而你一定想不到这部动漫是多么的让人惊喜。&lt;br&gt;
    
    </summary>
    
      <category term="生活" scheme="http://blog.xiaomo.info/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="动漫" scheme="http://blog.xiaomo.info/tags/%E5%8A%A8%E6%BC%AB/"/>
    
  </entry>
  
  <entry>
    <title>yargs插件的使用，node.js 命令行框架 yargs 和你的程序实现交互</title>
    <link href="http://blog.xiaomo.info/2016/08/22/NpmYargs/"/>
    <id>http://blog.xiaomo.info/2016/08/22/NpmYargs/</id>
    <published>2016-08-21T16:00:00.000Z</published>
    <updated>2016-11-25T07:12:23.302Z</updated>
    
    <content type="html"><![CDATA[<p>如何让你的node.js 应用程序像shell 脚本一样和你交互?没错，就是yargs。<br><a id="more"></a><br><a href="https://github.com/qq83387856" target="_blank" rel="external"><img src="http://static.xiaomo.info/images/nodejs.png" alt="点击访问小莫的github"></a></p>
<h3 id="一、使用场景"><a href="#一、使用场景" class="headerlink" title="一、使用场景"></a>一、使用场景</h3><p>大概有一种情况你需要让你的程序接收一个参数,通过这个参数我们做一系列的定制化功能.</p>
<p>常见的做法是 把一些不同环境不同配置的变量写到 config 配置文件中.</p>
<p>当你的环境变化的时候,你手动去修改你的config 中的变量来达到不同环境显示定制化的东西.<br>更具象的一个例子:</p>
<p>config文件中有一个配置项 langue</p>
<p>当你发布国内站点的时候,你需要配置成 langue=”zh-cn”</p>
<p>当你发布国外站点的时候,你需要配置成 langue=”en”</p>
<p>现在, yargs 的功能就是帮你实现类似上面这种定制化的参数功能.</p>
<p>从此一些简单定制参数可以彻底摆脱 config 配置了.</p>
<p>比如:</p>
<p>你的node.js 启动文件是 app.js</p>
<p>当你部署中文环境站点的时候,就可以这样  node app.js –l zh-cn</p>
<p>英文网站部署时  node app.js –l en</p>
<p>当然上面输入给启动文件的 -l 参数,你是可以在 app.js 文件中获取,然后对应加载你需要定制化的东东即可.</p>
<p>上面我们只是介绍它的作用,以及一个具体的例子让大家明白什么时候使用.下面开始介绍如何使用:</p>
<h3 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h3><h4 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h4><p><code>npm install --save yargs</code></p>
<h4 id="2-定义命令交互参数"><a href="#2-定义命令交互参数" class="headerlink" title="2. 定义命令交互参数:"></a>2. 定义命令交互参数:</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> argv = <span class="built_in">require</span>(<span class="string">'yargs'</span>).argv;</div><div class="line"><span class="keyword">if</span> (argv.l == <span class="string">'zh-cn'</span>) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Chinese site!'</span>);</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(argv.l == <span class="string">'en'</span>) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'English website!'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ ./app<span class="selector-class">.js</span> --l=zh-cn</div><div class="line">Chinese site!</div><div class="line"></div><div class="line">$ ./app<span class="selector-class">.js</span> --l=en</div><div class="line">English website!</div></pre></td></tr></table></figure>
<h4 id="4-接收参数"><a href="#4-接收参数" class="headerlink" title="4. 接收参数"></a>4. 接收参数</h4><figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">var</span> argv = <span class="keyword">require</span>(<span class="string">'yargs'</span>).argv;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (argv.l==<span class="string">'zh-cn'</span>) &#123;</div><div class="line">    <span class="comment">//获取参数 l 的值</span></div><div class="line">    console.<span class="keyword">log</span>(<span class="string">'Chinese website!'</span>);</div><div class="line">    <span class="built_in">global</span>.langue=<span class="string">'zh-cn'</span>;</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(argv.l==<span class="string">'en'</span>)&#123;</div><div class="line">    console.<span class="keyword">log</span>(<span class="string">'English website!'</span>);</div><div class="line">    <span class="built_in">global</span>.langue=<span class="string">'en'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面我们通过 argv 获取 –l 参数来判断当前要运行哪个环境.</p>
<p>然后使用全局变量 global.langue 来标识当前运行环境.</p>
<p>在后面的所有个性化定制处我们都可以直接使用全局变量 global.langue 来做判断.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如何让你的node.js 应用程序像shell 脚本一样和你交互?没错，就是yargs。&lt;br&gt;
    
    </summary>
    
      <category term="npm" scheme="http://blog.xiaomo.info/categories/npm/"/>
    
    
      <category term="npm" scheme="http://blog.xiaomo.info/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>ionic2环境搭建</title>
    <link href="http://blog.xiaomo.info/2016/07/28/Ionic2Environment/"/>
    <id>http://blog.xiaomo.info/2016/07/28/Ionic2Environment/</id>
    <published>2016-07-27T16:00:00.000Z</published>
    <updated>2016-11-25T07:12:23.594Z</updated>
    
    <content type="html"><![CDATA[<p>angular2的开发，少了移动端一定是不完整的。ionic2,用angular2开发移动平台。<br><a id="more"></a><br><a href="https://github.com/qq83387856" target="_blank" rel="external"><img src="http://static.xiaomo.info/images/ionic2.png" alt="点击访问小莫的github"></a></p>
<h3 id="一、-环境搭建"><a href="#一、-环境搭建" class="headerlink" title="一、 环境搭建"></a>一、 环境搭建</h3><h4 id="1-全局安装ionic"><a href="#1-全局安装ionic" class="headerlink" title="1. 全局安装ionic"></a>1. 全局安装ionic</h4><p><code>npm install -g ionic@beta</code></p>
<h4 id="2-创建一个项目"><a href="#2-创建一个项目" class="headerlink" title="2. 创建一个项目"></a>2. 创建一个项目</h4><p><code>ionic start app --v2</code></p>
<h4 id="3-输出环境"><a href="#3-输出环境" class="headerlink" title="3. 输出环境"></a>3. 输出环境</h4><p><code>npm install -g cordova</code></p>
<h4 id="4-IOS构建"><a href="#4-IOS构建" class="headerlink" title="4. IOS构建"></a>4. IOS构建</h4><p><code>ionic platform add ios</code><br><code>ionic emulate ios</code></p>
<h4 id="5-android构建"><a href="#5-android构建" class="headerlink" title="5. android构建"></a>5. android构建</h4><p>接下来，你需要安装Android的SDK。而Android SDK允许您构建编译运行Android的目标设备。尽管Android SDK自带的模拟器，Genymotion建议，因为它的速度更快。一旦安装完毕，开始一个Android的形象和运行：<br><code>ionic platform add android</code><br><code>ionic run android</code></p>
<h4 id="6-本地调试"><a href="#6-本地调试" class="headerlink" title="6. 本地调试"></a>6. 本地调试</h4><p><code>ionic serve</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;angular2的开发，少了移动端一定是不完整的。ionic2,用angular2开发移动平台。&lt;br&gt;
    
    </summary>
    
      <category term="ionic2" scheme="http://blog.xiaomo.info/categories/ionic2/"/>
    
    
      <category term="ionic2" scheme="http://blog.xiaomo.info/tags/ionic2/"/>
    
  </entry>
  
  <entry>
    <title>angular2 api整理之路由模块</title>
    <link href="http://blog.xiaomo.info/2016/07/28/Angular2ApiRouter/"/>
    <id>http://blog.xiaomo.info/2016/07/28/Angular2ApiRouter/</id>
    <published>2016-07-27T16:00:00.000Z</published>
    <updated>2016-11-25T07:12:23.928Z</updated>
    
    <content type="html"><![CDATA[<p>不知不觉接触angular2也有半年时间了，但是对于angular2仍然是一知半解。总觉得应该系统的了解一下它的api，正好ng2马上要有稳定版本了。是时候花一些时间整理一下了<br><a id="more"></a><br><a href="https://github.com/qq83387856" target="_blank" rel="external"><img src="http://static.xiaomo.info/images/angular.png" alt="点击访问小莫的github"></a></p>
<h3 id="一、常量"><a href="#一、常量" class="headerlink" title="一、常量"></a>一、常量</h3><h4 id="1-PRIMARY-OUTLET"><a href="#1-PRIMARY-OUTLET" class="headerlink" title="1. PRIMARY_OUTLET"></a>1. <a href="https://angular.cn/docs/ts/latest/api/router/index/PRIMARY_OUTLET-let.html" target="_blank" rel="external">PRIMARY_OUTLET</a></h4><h4 id="2-ROUTER-DIRECTIVES"><a href="#2-ROUTER-DIRECTIVES" class="headerlink" title="2. ROUTER_DIRECTIVES"></a>2. <a href="https://angular.cn/docs/ts/latest/api/router/index/ROUTER_DIRECTIVES-let.html" target="_blank" rel="external">ROUTER_DIRECTIVES</a></h4><p>路由指令集合常量</p>
<h3 id="二、接口"><a href="#二、接口" class="headerlink" title="二、接口"></a>二、接口</h3><h4 id="1-活跃路由ActivatedRoute"><a href="#1-活跃路由ActivatedRoute" class="headerlink" title="1. 活跃路由ActivatedRoute"></a>1. 活跃路由<a href="https://angular.cn/docs/ts/latest/api/router/index/ActivatedRoute-interface.html" target="_blank" rel="external">ActivatedRoute</a></h4><p>可以获取当前路由的参数和数据</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(route: ActivatedRoute) &#123;</div><div class="line">    <span class="keyword">const</span> id: Observable&lt;string&gt; = route.params.map(<span class="function"><span class="params">p</span> =&gt;</span> p.id);</div><div class="line">    <span class="keyword">const</span> data = route.data.map(<span class="function"><span class="params">d</span> =&gt;</span> d.user); <span class="comment">//includes `data` and `resolve`</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-活跃路由快照ActivatedRouteSnapshot"><a href="#2-活跃路由快照ActivatedRouteSnapshot" class="headerlink" title="2. 活跃路由快照ActivatedRouteSnapshot"></a>2. 活跃路由快照<a href="https://angular.cn/docs/ts/latest/api/router/index/ActivatedRouteSnapshot-interface.html" target="_blank" rel="external">ActivatedRouteSnapshot</a></h4><p>具体功能不明</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> <span class="title">MyComponent</span> &#123;</div><div class="line">  constructor(route: ActivatedRoute) &#123;</div><div class="line">    <span class="keyword">const</span> id: <span class="keyword">string</span> = route.snapshot.<span class="keyword">params</span>.id;</div><div class="line">    <span class="keyword">const</span> data = route.snapshot.data;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-可激活CanActivate"><a href="#3-可激活CanActivate" class="headerlink" title="3. 可激活CanActivate"></a>3. 可激活<a href="https://angular.cn/docs/ts/latest/api/router/index/CanActivate-interface.html" target="_blank" rel="external">CanActivate</a></h4><p>实现此接口并重写<code>canActivate</code>方法。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CanActivateTeam</span> <span class="keyword">implements</span> <span class="title">CanActivate</span> &#123;</span></div><div class="line">  constructor(<span class="keyword">private</span> <span class="string">permissions:</span> Permissions, <span class="keyword">private</span> <span class="string">currentUser:</span> UserToken) &#123;&#125;</div><div class="line">  canActivate(<span class="string">route:</span> ActivatedRouteSnapshot, <span class="string">state:</span> RouterStateSnapshot):Observable&lt;<span class="keyword">boolean</span>&gt; &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.permissions.canActivate(<span class="keyword">this</span>.currentUser, <span class="keyword">this</span>.route.params.id);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">bootstrap(AppComponent, [</div><div class="line">  CanActivateTeam,</div><div class="line">  provideRouter([&#123;</div><div class="line"><span class="symbol">    path:</span> <span class="string">'team/:id'</span>,</div><div class="line"><span class="symbol">    component:</span> Team,</div><div class="line"><span class="symbol">    canActivate:</span> [CanActivateTeam]</div><div class="line">  &#125;])</div><div class="line">);</div></pre></td></tr></table></figure>
<h4 id="4-CanDeactivate"><a href="#4-CanDeactivate" class="headerlink" title="4. CanDeactivate"></a>4. <a href="https://angular.cn/docs/ts/latest/api/router/index/CanDeactivate-interface.html" target="_blank" rel="external">CanDeactivate</a></h4><h4 id="5-其他选项ExtraOptions"><a href="#5-其他选项ExtraOptions" class="headerlink" title="5. 其他选项ExtraOptions"></a>5. 其他选项<a href="https://angular.cn/docs/ts/latest/api/router/index/ExtraOptions-interface.html" target="_blank" rel="external">ExtraOptions</a></h4><h4 id="6-解决-Resolve"><a href="#6-解决-Resolve" class="headerlink" title="6. 解决 Resolve"></a>6. 解决 <a href="https://angular.cn/docs/ts/latest/api/router/index/Resolve-interface.html" target="_blank" rel="external">Resolve</a></h4><p>实现此接口并重写<code>Resolve</code>方法。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TeamResolver</span> <span class="keyword">implements</span> <span class="title">Resolve</span> &#123;</span></div><div class="line">  constructor(<span class="keyword">private</span> <span class="string">backend:</span> Backend) &#123;&#125;</div><div class="line">  resolve(<span class="string">route:</span> ActivatedRouteSnapshot, <span class="string">state:</span> RouterStateSnapshot):Observable&lt;any&gt; &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.backend.fetchTeam(<span class="keyword">this</span>.route.params.id);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">bootstrap(AppComponent, [</div><div class="line">  TeamResolver,</div><div class="line">  provideRouter([&#123;</div><div class="line"><span class="symbol">    path:</span> <span class="string">'team/:id'</span>,</div><div class="line"><span class="symbol">    component:</span> TeamCmp,</div><div class="line"><span class="symbol">    resolve:</span> &#123;</div><div class="line"><span class="symbol">      team:</span> TeamResolver</div><div class="line">    &#125;</div><div class="line">  &#125;])</div><div class="line">);</div></pre></td></tr></table></figure>
<h4 id="7-路由-Route"><a href="#7-路由-Route" class="headerlink" title="7. 路由 Route"></a>7. 路由 <a href="https://angular.cn/docs/ts/latest/api/router/index/Route-interface.html" target="_blank" rel="external">Route</a></h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Route</span> &#123;</span></div><div class="line"><span class="string">path :</span> string</div><div class="line"><span class="string">terminal :</span> <span class="keyword">boolean</span></div><div class="line"><span class="string">pathMatch :</span> <span class="string">'full'</span>|<span class="string">'prefix'</span></div><div class="line"><span class="string">component :</span> Type|string</div><div class="line"><span class="string">redirectTo :</span> string</div><div class="line"><span class="string">outlet :</span> string</div><div class="line"><span class="string">canActivate :</span> any[]</div><div class="line"><span class="string">canDeactivate :</span> any[]</div><div class="line"><span class="string">data :</span> Data</div><div class="line"><span class="string">resolve :</span> ResolveData</div><div class="line"><span class="string">children :</span> Route[]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="8-路由状态-RouterState"><a href="#8-路由状态-RouterState" class="headerlink" title="8. 路由状态 RouterState"></a>8. 路由状态 <a href="https://angular.cn/docs/ts/latest/api/router/index/RouterState-interface.html" target="_blank" rel="external">RouterState</a></h4><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">class MyComponent &#123;</div><div class="line">  constructor(router: Router) &#123;</div><div class="line">    const <span class="keyword">state</span> = router.routerState;</div><div class="line">    const id: Observable<span class="variable">&lt;string&gt;</span> = <span class="keyword">state</span>.firstChild(<span class="keyword">state</span>.root).params.map(p =&gt; p.id);</div><div class="line">    const isDebug: Observable<span class="variable">&lt;string&gt;</span> = <span class="keyword">state</span>.queryParams.map(q =&gt; q.<span class="keyword">debug</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="9-路由状态快照RouterStateSnapshot"><a href="#9-路由状态快照RouterStateSnapshot" class="headerlink" title="9. 路由状态快照RouterStateSnapshot"></a>9. 路由状态快照<a href="https://angular.cn/docs/ts/latest/api/router/index/RouterStateSnapshot-interface.html" target="_blank" rel="external">RouterStateSnapshot</a></h4><figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">constructor</span><span class="params">(router: Router)</span> <span class="comment">&#123;</span></span></div><div class="line">  const snapshot = router.routerState.snapshot;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="10-路径树-UrlTree"><a href="#10-路径树-UrlTree" class="headerlink" title="10. 路径树 UrlTree"></a>10. 路径树 <a href="https://angular.cn/docs/ts/latest/api/router/index/UrlTree-interface.html" target="_blank" rel="external">UrlTree</a></h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> <span class="title">UrlTree</span> &#123;</div><div class="line">root : UrlSegment</div><div class="line">queryParams : &#123;[key: <span class="keyword">string</span>]: <span class="keyword">string</span>&#125;</div><div class="line">fragment : <span class="function"><span class="keyword">string</span></span></div><div class="line"><span class="title">toString</span>(<span class="params"></span>) : <span class="keyword">string</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="三、类"><a href="#三、类" class="headerlink" title="三、类"></a>三、类</h3><h4 id="1-默认路径初始化-DefaultUrlSerializer"><a href="#1-默认路径初始化-DefaultUrlSerializer" class="headerlink" title="1. 默认路径初始化 DefaultUrlSerializer"></a>1. 默认路径初始化 <a href="https://angular.cn/docs/ts/latest/api/router/index/DefaultUrlSerializer-class.html" target="_blank" rel="external">DefaultUrlSerializer</a></h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">class DefaultUrlSerializer &#123;</div><div class="line"><span class="function"><span class="title">parse</span><span class="params">(url: string)</span></span> : UrlTree</div><div class="line"><span class="function"><span class="title">serialize</span><span class="params">(tree: UrlTree)</span></span> : string</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-取消导航NavigationCancel"><a href="#2-取消导航NavigationCancel" class="headerlink" title="2. 取消导航NavigationCancel"></a>2. 取消导航<a href="https://angular.cn/docs/ts/latest/api/router/index/NavigationCancel-class.html" target="_blank" rel="external">NavigationCancel</a></h4><figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">constructor</span><span class="params">(id: number, url: <span class="keyword">string</span>)</span></span></div><div class="line"><span class="title">id</span> : number</div><div class="line">url : <span class="keyword">string</span></div><div class="line">toString() : <span class="keyword">string</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-结束导航-NavigationEnd"><a href="#3-结束导航-NavigationEnd" class="headerlink" title="3. 结束导航 NavigationEnd"></a>3. 结束导航 <a href="https://angular.cn/docs/ts/latest/api/router/index/NavigationEnd-class.html" target="_blank" rel="external">NavigationEnd</a></h4><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="built_in">class</span> NavigationEnd &#123;</div><div class="line">constructor(<span class="built_in">id</span>: <span class="built_in">number</span>, url: <span class="built_in">string</span>, urlAfterRedirects: <span class="built_in">string</span>)</div><div class="line"><span class="built_in">id</span> : <span class="built_in">number</span></div><div class="line">url : <span class="built_in">string</span></div><div class="line">urlAfterRedirects : <span class="built_in">string</span></div><div class="line">toString() : <span class="built_in">string</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-导航错误NavigationError"><a href="#4-导航错误NavigationError" class="headerlink" title="4. 导航错误NavigationError"></a>4. 导航错误<a href="https://angular.cn/docs/ts/latest/api/router/index/NavigationError-class.html" target="_blank" rel="external">NavigationError</a></h4><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">class</span> NavigationError &#123;</div><div class="line">constructor(<span class="built_in">id</span>: <span class="built_in">number</span>, url: <span class="built_in">string</span>, <span class="keyword">error</span>: any)</div><div class="line"><span class="built_in">id</span> : <span class="built_in">number</span></div><div class="line">url : <span class="built_in">string</span></div><div class="line"><span class="keyword">error</span> : any</div><div class="line">toString() : <span class="built_in">string</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="5-根路由-RootRouter"><a href="#5-根路由-RootRouter" class="headerlink" title="5. 根路由 RootRouter"></a>5. 根路由 <a href="https://angular.cn/docs/ts/latest/api/router-deprecated/index/RootRouter-class.html" target="_blank" rel="external">RootRouter</a></h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RootRouter</span> &#123;</span></div><div class="line">constructor(<span class="string">registry:</span> RouteRegistry, <span class="string">location:</span> Location, <span class="string">primaryComponent:</span> Type)</div><div class="line">commit(<span class="string">instruction:</span> Instruction, _skipLocationChange?: <span class="keyword">boolean</span>) : Promise&lt;any&gt;</div><div class="line">dispose() : <span class="keyword">void</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="6-路由数据-RouteData"><a href="#6-路由数据-RouteData" class="headerlink" title="6. 路由数据 RouteData"></a>6. 路由数据 <a href="https://angular.cn/docs/ts/latest/api/router-deprecated/index/RouteData-class.html" target="_blank" rel="external">RouteData</a></h4><figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">class RouteData &#123;</div><div class="line">constructor(data?: &#123;[<span class="built_in">key</span>: <span class="built_in">string</span>]: <span class="built_in">any</span>&#125;)</div><div class="line">data : &#123;[<span class="built_in">key</span>: <span class="built_in">string</span>]: <span class="built_in">any</span>&#125;</div><div class="line"><span class="built_in">get</span>(<span class="built_in">key</span>: <span class="built_in">string</span>) : <span class="built_in">any</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="7-路由参数-RouteParams"><a href="#7-路由参数-RouteParams" class="headerlink" title="7. 路由参数 RouteParams"></a>7. 路由参数 <a href="https://angular.cn/docs/ts/latest/api/router-deprecated/index/RouteParams-class.html" target="_blank" rel="external">RouteParams</a></h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> <span class="title">RouteParams</span> &#123;</div><div class="line">constructor(<span class="keyword">params</span>: &#123;[key: <span class="keyword">string</span>]: <span class="keyword">string</span>&#125;)</div><div class="line"><span class="keyword">params</span> : &#123;[key: <span class="keyword">string</span>]: <span class="keyword">string</span>&#125;</div><div class="line"><span class="keyword">get</span>(param: <span class="keyword">string</span>) : <span class="keyword">string</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="8-注册路由-RouteRegistry"><a href="#8-注册路由-RouteRegistry" class="headerlink" title="8. 注册路由 RouteRegistry"></a>8. 注册路由 <a href="https://angular.cn/docs/ts/latest/api/router-deprecated/index/RouteRegistry-class.html" target="_blank" rel="external">RouteRegistry</a></h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">class RouteRegistry &#123;</div><div class="line"><span class="function"><span class="title">constructor</span><span class="params">(_rootComponent: Type)</span></span></div><div class="line"><span class="function"><span class="title">config</span><span class="params">(parentComponent: any, config: RouteDefinition)</span></span> : void</div><div class="line"><span class="function"><span class="title">configFromComponent</span><span class="params">(component: any)</span></span> : void</div><div class="line"><span class="function"><span class="title">recognize</span><span class="params">(url: string, ancestorInstructions: Instruction[])</span></span> : Promise&lt;Instruction&gt;</div><div class="line"><span class="function"><span class="title">generate</span><span class="params">(linkParams: any[], ancestorInstructions: Instruction[], _aux?: any)</span></span> : Instruction</div><div class="line"><span class="function"><span class="title">hasRoute</span><span class="params">(name: string, parentComponent: any)</span></span> : boolean</div><div class="line"><span class="function"><span class="title">generateDefault</span><span class="params">(componentCursor: Type)</span></span> : Instruction</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="9-路由-Router"><a href="#9-路由-Router" class="headerlink" title="9. 路由 Router"></a>9. 路由 <a href="https://angular.cn/docs/ts/latest/api/router-deprecated/index/Router-class.html" target="_blank" rel="external">Router</a></h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Router</span> &#123;</span></div><div class="line">constructor(<span class="string">registry:</span> RouteRegistry, <span class="string">parent:</span> Router, <span class="string">hostComponent:</span> any, root?: Router)</div><div class="line"><span class="string">navigating :</span> <span class="keyword">boolean</span></div><div class="line"><span class="string">lastNavigationAttempt :</span> string</div><div class="line"><span class="string">currentInstruction :</span> Instruction</div><div class="line"><span class="string">registry :</span> RouteRegistry</div><div class="line"><span class="string">parent :</span> Router</div><div class="line"><span class="string">hostComponent :</span> any</div><div class="line"><span class="string">root :</span> Router</div><div class="line">childRouter(<span class="string">hostComponent:</span> any) : Router</div><div class="line">auxRouter(<span class="string">hostComponent:</span> any) : Router</div><div class="line">registerPrimaryOutlet(<span class="string">outlet:</span> RouterOutlet) : Promise&lt;any&gt;</div><div class="line">unregisterPrimaryOutlet(<span class="string">outlet:</span> RouterOutlet) : <span class="keyword">void</span></div><div class="line">registerAuxOutlet(<span class="string">outlet:</span> RouterOutlet) : Promise&lt;any&gt;</div><div class="line">isRouteActive(<span class="string">instruction:</span> Instruction) : <span class="keyword">boolean</span></div><div class="line">config(<span class="string">definitions:</span> RouteDefinition[]) : Promise&lt;any&gt;</div><div class="line">navigate(<span class="string">linkParams:</span> any[]) : Promise&lt;any&gt;</div><div class="line">navigateByUrl(<span class="string">url:</span> string, _skipLocationChange?: <span class="keyword">boolean</span>) : Promise&lt;any&gt;</div><div class="line">navigateByInstruction(<span class="string">instruction:</span> Instruction, _skipLocationChange?: <span class="keyword">boolean</span>) : Promise&lt;any&gt;</div><div class="line">commit(<span class="string">instruction:</span> Instruction, _skipLocationChange?: <span class="keyword">boolean</span>) : Promise&lt;any&gt;</div><div class="line">subscribe(<span class="string">onNext:</span> (<span class="string">value:</span> any) =&gt; <span class="keyword">void</span>, onError?: (<span class="string">value:</span> any) =&gt; <span class="keyword">void</span>) : Object</div><div class="line">deactivate(<span class="string">instruction:</span> Instruction) : Promise&lt;any&gt;</div><div class="line">recognize(<span class="string">url:</span> string) : Promise&lt;Instruction&gt;</div><div class="line">renavigate() : Promise&lt;any&gt;</div><div class="line">generate(<span class="string">linkParams:</span> any[]) : Instruction</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="四、-指令"><a href="#四、-指令" class="headerlink" title="四、 指令"></a>四、 指令</h3><h4 id="1-RouterLink"><a href="#1-RouterLink" class="headerlink" title="1. RouterLink"></a>1. <a href="https://angular.cn/docs/ts/latest/api/router/index/RouterLink-directive.html" target="_blank" rel="external">RouterLink</a></h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RouterLink</span> &#123;</span></div><div class="line"><span class="string">commands :</span> any[]</div><div class="line"><span class="string">queryParams :</span> &#123;[<span class="string">k:</span> string]: any&#125;</div><div class="line"><span class="string">fragment :</span> string</div><div class="line"><span class="string">urlTree :</span> UrlTree</div><div class="line"><span class="string">router :</span> Router</div><div class="line"><span class="string">route :</span> ActivatedRoute</div><div class="line"><span class="string">locationStrategy :</span> LocationStrategy</div><div class="line">routerLink</div><div class="line">onClick(<span class="string">button:</span> number, <span class="string">ctrlKey:</span> <span class="keyword">boolean</span>, <span class="string">metaKey:</span> <span class="keyword">boolean</span>) : <span class="keyword">boolean</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-RouterLinkActive"><a href="#2-RouterLinkActive" class="headerlink" title="2. RouterLinkActive"></a>2. <a href="https://angular.cn/docs/ts/latest/api/router/index/RouterLinkActive-directive.html" target="_blank" rel="external">RouterLinkActive</a></h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RouterLinkActive</span> &#123;</span></div><div class="line"><span class="string">links :</span> QueryList&lt;RouterLink&gt;</div><div class="line"><span class="string">linksWithHrefs :</span> QueryList&lt;RouterLinkWithHref&gt;</div><div class="line"><span class="string">classes :</span> string[]</div><div class="line"><span class="string">subscription :</span> Subscription</div><div class="line"><span class="string">routerLinkActiveOptions :</span> &#123;<span class="string">exact:</span> <span class="keyword">boolean</span>&#125;</div><div class="line"><span class="string">router :</span> Router</div><div class="line"><span class="string">element :</span> ElementRef</div><div class="line"><span class="string">renderer :</span> Renderer</div><div class="line">ngAfterContentInit() : <span class="keyword">void</span></div><div class="line">routerLinkActive</div><div class="line">ngOnChanges(<span class="string">changes:</span> &#123;&#125;) : any</div><div class="line">ngOnDestroy() : any</div><div class="line">update() : <span class="keyword">void</span></div><div class="line">reduceList(<span class="string">currentUrlTree:</span> UrlTree, <span class="string">q:</span> QueryList&lt;any&gt;) : <span class="keyword">boolean</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-RouterLinkWithHref"><a href="#3-RouterLinkWithHref" class="headerlink" title="3. RouterLinkWithHref"></a>3. <a href="https://angular.cn/docs/ts/latest/api/router/index/RouterLinkWithHref-directive.html" target="_blank" rel="external">RouterLinkWithHref</a></h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RouterLinkWithHref</span> &#123;</span></div><div class="line"><span class="string">target :</span> string</div><div class="line"><span class="string">commands :</span> any[]</div><div class="line"><span class="string">queryParams :</span> &#123;[<span class="string">k:</span> string]: any&#125;</div><div class="line"><span class="string">fragment :</span> string</div><div class="line"><span class="string">href :</span> string</div><div class="line"><span class="string">urlTree :</span> UrlTree</div><div class="line"><span class="string">router :</span> Router</div><div class="line"><span class="string">route :</span> ActivatedRoute</div><div class="line"><span class="string">locationStrategy :</span> LocationStrategy</div><div class="line">routerLink</div><div class="line">ngOnChanges(<span class="string">changes:</span> &#123;&#125;) : any</div><div class="line">onClick(<span class="string">button:</span> number, <span class="string">ctrlKey:</span> <span class="keyword">boolean</span>, <span class="string">metaKey:</span> <span class="keyword">boolean</span>) : <span class="keyword">boolean</span></div><div class="line">updateTargetUrlAndHref() : <span class="keyword">void</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-RouterOutlet"><a href="#4-RouterOutlet" class="headerlink" title="4. RouterOutlet"></a>4. <a href="https://angular.cn/docs/ts/latest/api/router/index/RouterOutlet-directive.html" target="_blank" rel="external">RouterOutlet</a></h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RouterOutlet</span> &#123;</span></div><div class="line"><span class="string">activated :</span> ComponentRef&lt;any&gt;</div><div class="line"><span class="string">outletMap :</span> RouterOutletMap</div><div class="line"><span class="string">location :</span> ViewContainerRef</div><div class="line"><span class="string">componentFactoryResolver :</span> ComponentFactoryResolver</div><div class="line"><span class="string">isActivated :</span> <span class="keyword">boolean</span></div><div class="line"><span class="string">component :</span> Object</div><div class="line"><span class="string">activatedRoute :</span> ActivatedRoute</div><div class="line">deactivate() : <span class="keyword">void</span></div><div class="line">activate(<span class="string">activatedRoute:</span> ActivatedRoute, <span class="string">providers:</span> ResolvedReflectiveProvider[], <span class="string">outletMap:</span> RouterOutletMap) : <span class="keyword">void</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不知不觉接触angular2也有半年时间了，但是对于angular2仍然是一知半解。总觉得应该系统的了解一下它的api，正好ng2马上要有稳定版本了。是时候花一些时间整理一下了&lt;br&gt;
    
    </summary>
    
      <category term="angular2" scheme="http://blog.xiaomo.info/categories/angular2/"/>
    
    
      <category term="angular2" scheme="http://blog.xiaomo.info/tags/angular2/"/>
    
  </entry>
  
  <entry>
    <title>angular2 api整理之通用模块</title>
    <link href="http://blog.xiaomo.info/2016/07/21/Angular2ApiCommon/"/>
    <id>http://blog.xiaomo.info/2016/07/21/Angular2ApiCommon/</id>
    <published>2016-07-20T16:00:00.000Z</published>
    <updated>2016-11-25T07:12:23.993Z</updated>
    
    <content type="html"><![CDATA[<p>不知不觉接触angular2也有半年时间了，但是对于angular2仍然是一知半解。总觉得应该系统的了解一下它的api，正好ng2马上要有稳定版本了。是时候花一些时间整理一下了<br><a id="more"></a><br><a href="https://github.com/qq83387856" target="_blank" rel="external"><img src="http://static.xiaomo.info/images/angular.png" alt="点击访问小莫的github"></a></p>
<h3 id="一、通用包"><a href="#一、通用包" class="headerlink" title="一、通用包"></a>一、通用包</h3><h4 id="1-常量类"><a href="#1-常量类" class="headerlink" title="1. 常量类"></a>1. 常量类</h4><h4 id="1-1-根路径-APP-BASE-HREF"><a href="#1-1-根路径-APP-BASE-HREF" class="headerlink" title="1.1 根路径 APP_BASE_HREF"></a>1.1 根路径 <a href="https://angular.cn/docs/js/latest/api/common/index/APP_BASE_HREF-let.html" target="_blank" rel="external">APP_BASE_HREF</a></h4><p>主要作用：在顶层组件中使用bootstrap启动整个app的时候设置根url,格式如下</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">bootstrap(AppCmp, [</div><div class="line">  ROUTER_PROVIDERS,</div><div class="line">  &#123;<span class="string">provide:</span> APP_BASE_HREF, <span class="string">useValue:</span> <span class="string">'/my/app'</span>&#125;</div><div class="line">]);</div></pre></td></tr></table></figure>
<h4 id="1-2-指令常量-COMMON-DIRECTIVES"><a href="#1-2-指令常量-COMMON-DIRECTIVES" class="headerlink" title="1.2 指令常量 COMMON_DIRECTIVES"></a>1.2 指令常量 <a href="https://angular.cn/docs/js/latest/api/common/index/COMMON_DIRECTIVES-let.html" target="_blank" rel="external">COMMON_DIRECTIVES</a></h4><p>主要作用：所有核心内置指令的集合：包含NgClass, NgIf, NgFor, NgSwitch, NgSwitchWhen, NgSwitchDefault, NgModel, NgForm等。<br>CORE_DIRECTIVES少了NgModel和NgForm，不过它是稳定的。COMMON_DIRECTIVES还是试验性阶段。<br>单个引入</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;NgClass, NgIf, NgFor, NgSwitch, NgSwitchWhen, NgSwitchDefault, NgModel, NgForm&#125; from</div><div class="line"><span class="string">'@angular/common'</span>;</div><div class="line"><span class="meta">@Component(&#123;</span></div><div class="line">  selector: <span class="meta-string">'my-component'</span>,</div><div class="line">  templateUrl: <span class="meta-string">'myComponent.html'</span>,</div><div class="line">  directives: [NgClass, NgIf, NgFor, NgSwitch, NgSwitchWhen, NgSwitchDefault, NgModel, NgForm,</div><div class="line">OtherDirective]</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>使用常量引入</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;COMMON_DIRECTIVES&#125; from <span class="string">'@angular/common'</span>;</div><div class="line"><span class="meta">@Component(&#123;</span></div><div class="line">  selector: <span class="meta-string">'my-component'</span>,</div><div class="line">  templateUrl: <span class="meta-string">'myComponent.html'</span>,</div><div class="line">  directives: [COMMON_DIRECTIVES, OtherDirective]</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h4 id="1-3-管道常量-COMMON-PIPES"><a href="#1-3-管道常量-COMMON-PIPES" class="headerlink" title="1.3 管道常量 COMMON_PIPES"></a>1.3 管道常量 <a href="https://angular.cn/docs/js/latest/api/common/index/COMMON_PIPES-let.html" target="_blank" rel="external">COMMON_PIPES</a></h4><p>目前还是试验性的。功能同上，是所有 管道的合集 包含 AsyncPipe、I18nPluralPipe、I18nSelectPipe、SlicePipe等</p>
<h4 id="1-4-表单指令常量-FORM-DIRECTIVES"><a href="#1-4-表单指令常量-FORM-DIRECTIVES" class="headerlink" title="1.4 表单指令常量 FORM_DIRECTIVES"></a>1.4 表单指令常量 <a href="https://angular.cn/docs/js/latest/api/common/index/FORM_DIRECTIVES-let.html" target="_blank" rel="external">FORM_DIRECTIVES</a></h4><p>试验阶段。所有有关表常的指令礼盒</p>
<h4 id="1-5-表单提供者常量-FORM-PROVIDERS"><a href="#1-5-表单提供者常量-FORM-PROVIDERS" class="headerlink" title="1.5 表单提供者常量 FORM_PROVIDERS"></a>1.5 表单提供者常量 <a href="https://angular.cn/docs/js/latest/api/common/index/FORM_PROVIDERS-let.html" target="_blank" rel="external">FORM_PROVIDERS</a></h4><p>在bootsrap的时候注入进去</p>
<h4 id="1-6-异步验证常量-NG-ASYNC-VALIDATORS"><a href="#1-6-异步验证常量-NG-ASYNC-VALIDATORS" class="headerlink" title="1.6 异步验证常量 NG_ASYNC_VALIDATORS"></a>1.6 异步验证常量 <a href="https://angular.cn/docs/js/latest/api/common/index/NG_ASYNC_VALIDATORS-let.html" target="_blank" rel="external">NG_ASYNC_VALIDATORS</a></h4><p>为了控制一个表单的异步验证，要在验证中添加  <code>multi: true</code>,当然也少不了<code>NG_VALIDATORS</code></p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bootstrap(MyApp, [&#123;<span class="string">provide:</span> NG_VALIDATORS, <span class="string">useValue:</span> myValidator, <span class="string">multi:</span> <span class="literal">true</span>&#125;]);</div></pre></td></tr></table></figure>
<h4 id="1-7-值存储器常量-NG-VALUE-ACCESSOR"><a href="#1-7-值存储器常量-NG-VALUE-ACCESSOR" class="headerlink" title="1.7 值存储器常量 NG_VALUE_ACCESSOR"></a>1.7 值存储器常量 <a href="https://angular.cn/docs/js/latest/api/common/index/NG_VALUE_ACCESSOR-let.html" target="_blank" rel="external">NG_VALUE_ACCESSOR</a></h4><p>具体作用和使用方法不明确</p>
<h3 id="2、-接口"><a href="#2、-接口" class="headerlink" title="2、 接口"></a>2、 接口</h3><h4 id="2-1-控制值存储器ControlValueAccessor"><a href="#2-1-控制值存储器ControlValueAccessor" class="headerlink" title="2.1 控制值存储器ControlValueAccessor"></a>2.1 控制值存储器<a href="https://angular.cn/docs/js/latest/api/common/index/ControlValueAccessor-interface.html" target="_blank" rel="external">ControlValueAccessor</a></h4><p>具体作用和使用方法不明确</p>
<h4 id="2-2-表单-Form"><a href="#2-2-表单-Form" class="headerlink" title="2.2 表单 Form"></a>2.2 表单 <a href="https://angular.cn/docs/js/latest/api/common/index/Form-interface.html" target="_blank" rel="external">Form</a></h4><p> NgFormModel 和 NgForm实现在这个接口，只在form模块使用</p>
<h4 id="2-3-路径变化事件-UrlChangeEvent"><a href="#2-3-路径变化事件-UrlChangeEvent" class="headerlink" title="2.3 路径变化事件 UrlChangeEvent"></a>2.3 路径变化事件 <a href="https://angular.cn/docs/js/latest/api/common/index/UrlChangeEvent-interface.html" target="_blank" rel="external">UrlChangeEvent</a></h4><p>当监听到URL变化的时候触发此事件</p>
<h4 id="2-4-路径变化监听器-UrlChangeListener"><a href="#2-4-路径变化监听器-UrlChangeListener" class="headerlink" title="2.4 路径变化监听器 UrlChangeListener"></a>2.4 路径变化监听器 <a href="https://angular.cn/docs/js/latest/api/common/index/UrlChangeListener-interface.html" target="_blank" rel="external">UrlChangeListener</a></h4><p>监听URL的变化</p>
<h4 id="2-5-验证Validator"><a href="#2-5-验证Validator" class="headerlink" title="2.5 验证Validator"></a>2.5 验证<a href="https://angular.cn/docs/js/latest/api/common/index/Validator-interface.html" target="_blank" rel="external">Validator</a></h4><p>在写验证指令的时候实现这个接口</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Directive</span>(&#123;</div><div class="line"><span class="symbol">  selector:</span> <span class="string">'[custom-validator]'</span>,</div><div class="line"><span class="symbol">  providers:</span> [&#123;<span class="string">provide:</span> NG_VALIDATORS, <span class="string">useExisting:</span> CustomValidatorDirective, <span class="string">multi:</span> <span class="literal">true</span>&#125;]</div><div class="line">&#125;)</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomValidatorDirective</span> <span class="keyword">implements</span> <span class="title">Validator</span> &#123;</span></div><div class="line">  validate(<span class="string">c:</span> Control): &#123;[<span class="string">key:</span> string]: any&#125; &#123;</div><div class="line">    <span class="keyword">return</span> &#123;<span class="string">"custom"</span>: <span class="literal">true</span>&#125;;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-类"><a href="#3-类" class="headerlink" title="3. 类"></a>3. 类</h3><h4 id="3-1-抽象控制-AbstractControl"><a href="#3-1-抽象控制-AbstractControl" class="headerlink" title="3.1 抽象控制 AbstractControl"></a>3.1 抽象控制 <a href="https://angular.cn/docs/js/latest/api/common/index/AbstractControl-class.html" target="_blank" rel="external">AbstractControl</a></h4>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不知不觉接触angular2也有半年时间了，但是对于angular2仍然是一知半解。总觉得应该系统的了解一下它的api，正好ng2马上要有稳定版本了。是时候花一些时间整理一下了&lt;br&gt;
    
    </summary>
    
      <category term="angular2" scheme="http://blog.xiaomo.info/categories/angular2/"/>
    
    
      <category term="angular2" scheme="http://blog.xiaomo.info/tags/angular2/"/>
    
  </entry>
  
  <entry>
    <title>rxjs全接触</title>
    <link href="http://blog.xiaomo.info/2016/07/12/JavascriptRxjsStudy/"/>
    <id>http://blog.xiaomo.info/2016/07/12/JavascriptRxjsStudy/</id>
    <published>2016-07-11T16:00:00.000Z</published>
    <updated>2016-11-25T07:12:23.827Z</updated>
    
    <content type="html"><![CDATA[<p>RxJS是用于通过使用观察序列构成异步和基于事件的程序库。它提供了一个核心类型——<a href="http://reactivex.io/rxjs/manual/overview.html#observable" target="_blank" rel="external">Observable</a>（Observer, Schedulers, Subjects）和数组＃其他（map, filter, reduce, every, etc），以允许处理异步事件集合。<br><a id="more"></a><br><a href="https://github.com/qq83387856" target="_blank" rel="external"><img src="http://static.xiaomo.info/images/angular.png" alt="点击访问小莫的github"></a></p>
<h3 id="一、rxjs内容"><a href="#一、rxjs内容" class="headerlink" title="一、rxjs内容"></a>一、rxjs内容</h3><p>ReactiveX结合观察者模式与迭代器模式和函数式编程与收藏，以填补管理事件序列的理想方法的需要。</p>
<p>在RxJS其中解决异步事件管理的基本概念是：</p>
<h4 id="1-Observable"><a href="#1-Observable" class="headerlink" title="1. Observable"></a>1. Observable</h4><p>可观察对象，代表未来值或事件的可调用集合的想法.<br>observer是一个由回调函数组成的对象，键名分别为<code>next</code>、<code>error</code> 和 <code>complete</code>，以此接受Observable推送的不同类型的通知。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> observer = &#123;</div><div class="line">  <span class="attr">next</span>: <span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'Observer got a next value: '</span> + x),</div><div class="line">  <span class="attr">error</span>: <span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.error(<span class="string">'Observer got an error: '</span> + err),</div><div class="line">  <span class="attr">complete</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'Observer got a complete notification'</span>),</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>调用Observer逻辑，只需在subscribe（订阅）Observable后将Observer传入：<code>observable.subscribe(observer);</code></p>
<h4 id="2-Observer"><a href="#2-Observer" class="headerlink" title="2. Observer"></a>2. Observer</h4><p>观察者，也被称为称为消费者，是回调的集合，它知道如何监听由观测交付价值</p>
<h4 id="3-Subscription"><a href="#3-Subscription" class="headerlink" title="3. Subscription"></a>3. Subscription</h4><p>Subscription是一个代表可以终止资源的对象，表示一个Observable的执行过程。Subscription有一个重要的方法：unsubscribe。这个方法不需要传入参数，调用后便会终止相应的资源。</p>
<h4 id="4-Operators"><a href="#4-Operators" class="headerlink" title="4. Operators"></a>4. Operators</h4><p>操作者，是一种纯函数，能够使用函数式编程风格处理集合，具体操作有map, filter, concat, flatMap,等</p>
<h4 id="5-Subject"><a href="#5-Subject" class="headerlink" title="5. Subject"></a>5. Subject</h4><p>在RxJS中，Subject是一类特殊的Observable，它可以向多个Observer多路推送数值。普通的Observable并不具备多路推送的能力（每一个Observer都有自己独立的执行环境），而Subject可以共享一个执行环境。Subject是一种可以多路推送的可观察对象。与EventEmitter类似，Subject维护着自己的Observer。<br>每一个Subject都是一个Observable（可观察对象） 对于一个Subject，你可以订阅（subscribe）它，Observer会和往常一样接收到数据。从Observer的视角看，它并不能区分自己的执行环境是普通Observable的单路推送还是基于Subject的多路推送。<br>每一个Subject也可以作为Observer（观察者） Subject同样也是一个由next(v)，error(e)，和 complete()这些方法组成的对象。调用next(theValue)方法后，Subject会向所有已经在其上注册的Observer多路推送theValue。</p>
<h4 id="6-Schedulers"><a href="#6-Schedulers" class="headerlink" title="6. Schedulers"></a>6. Schedulers</h4><p>调度器，是用于控制并发的中心分发器，当计算发生在setTimeout or requestAnimationFrame 时，允许我们来进行协调。</p>
<h4 id="7、推和拉"><a href="#7、推和拉" class="headerlink" title="7、推和拉"></a>7、推和拉</h4><p>拉和推是两个不同的协议如何数据生产者可以与数据消费者。</p>
<p>拉<br>数据消费者可以决定什么时候去接收数据提供者的数据。数据提供者自身并不知道什么时候把数据交给数据消费者。<br>每个JavaScript函数是一个拉式系统。该功能是数据的生产者，而调用该函数的代码由“揪”出了消费它单从它调用的返回值。</p>
<p>推<br>在推送系统，生产者确定何时发送数据到消费者。消费者是不知道什么时候会收到的数据。<br>在JavaScript中目前Promises是最常用的推系统类型。 一个Promises(提供者)传递了一个处理好的值然后注册一个回调(消费者)。但是跟方法不同，它是应许，负责确定正是当值被“推”到了回调。</p>
<h3 id="二、相关api"><a href="#二、相关api" class="headerlink" title="二、相关api"></a>二、相关api</h3><h4 id="1-scan"><a href="#1-scan" class="headerlink" title="1. scan()"></a>1. scan()</h4><p>使用RxJS您隔离的状态。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> button = <span class="built_in">document</span> . querySelector ( <span class="string">'button'</span> );</div><div class="line">Rx . Observable . fromEvent ( button ,  <span class="string">'click'</span> )</div><div class="line">  . scan ( <span class="function"><span class="params">count</span> =&gt;</span> count +  <span class="number">1</span> ,  <span class="number">0</span> )</div><div class="line">  . subscribe ( <span class="function"><span class="params">count</span> =&gt;</span> <span class="built_in">console</span> . log ( <span class="string">'Clicked &#123;$ count&#125;次'</span> ））;</div></pre></td></tr></table></figure>
<h4 id="2-subscribe"><a href="#2-subscribe" class="headerlink" title="2. subscribe()"></a>2. subscribe()</h4><p>异步函数，可以使用一个回调</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var button = <span class="built_in">document</span> . querySelector ( <span class="string">'button'</span> );</div><div class="line">Rx . Observable . fromEvent ( button ,  <span class="string">'click'</span> )</div><div class="line">  . subscribe (<span class="function"><span class="params">()</span>  =&gt;</span> <span class="built_in">console</span> . log ( <span class="string">'Clicked!'</span> ));</div></pre></td></tr></table></figure>
<h4 id="3-throttle"><a href="#3-throttle" class="headerlink" title="3. throttle()"></a>3. throttle()</h4><h4 id="4-map"><a href="#4-map" class="headerlink" title="4. map()"></a>4. map()</h4><p>每秒最多点击次数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> button = <span class="built_in">document</span> . querySelector ( <span class="string">'button'</span> );</div><div class="line">Rx . Observable . fromEvent ( button ,  <span class="string">'click'</span> )</div><div class="line">  . throttle ( <span class="number">1000</span> )</div><div class="line">  . map ( <span class="function"><span class="params">event</span>  =&gt;</span>  event . clientX )</div><div class="line">  . scan (<span class="function">(<span class="params"> count , clientX </span>)  =&gt;</span> count + clientX ,  <span class="number">0</span> )</div><div class="line">  . subscribe ( <span class="function"><span class="params">count</span> =&gt;</span> <span class="built_in">console</span> . log ( count ));</div></pre></td></tr></table></figure>
<h3 id="三、具体使用"><a href="#三、具体使用" class="headerlink" title="三、具体使用"></a>三、具体使用</h3><h4 id="1-Observable-1"><a href="#1-Observable-1" class="headerlink" title="1. Observable"></a>1. Observable</h4><p>我们定义一个observable，前3个是步同执行。第四个是1秒后执行(异步)，执行完4之后整个observable才算完成。<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var observable =  Rx . Observable . create ( <span class="function"><span class="keyword">function</span>  <span class="params">( observer )</span></span>  &#123;</div><div class="line">  observer . <span class="built_in">next</span> ( <span class="number">1</span> );</div><div class="line">  observer . <span class="built_in">next</span> ( <span class="number">2</span> );</div><div class="line">  observer . <span class="built_in">next</span> ( <span class="number">3</span> );</div><div class="line">  setTimeout (()  =&gt;  &#123;</div><div class="line">    observer . <span class="built_in">next</span> ( <span class="number">4</span> );</div><div class="line">    observer . complete ();</div><div class="line">  &#125;,  <span class="number">1000</span> );</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h4 id="2-subscribe-1"><a href="#2-subscribe-1" class="headerlink" title="2.subscribe"></a>2.subscribe</h4><p>为了能够看到这些值，我们需要订阅(subscribe)它。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">'just before subscribe'</span>);</div><div class="line">observable.subscribe(&#123;</div><div class="line">  <span class="attr">next</span>: <span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'got value '</span> + x),</div><div class="line">  <span class="attr">error</span>: <span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.error(<span class="string">'something wrong occurred: '</span> + err),</div><div class="line">  <span class="attr">complete</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'done'</span>),</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'just after subscribe'</span>);</div></pre></td></tr></table></figure>
<p>结果如下</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">just <span class="keyword">before</span> subscribe</div><div class="line">got <span class="built_in">value</span> <span class="number">1</span></div><div class="line">got <span class="built_in">value</span> <span class="number">2</span></div><div class="line">got <span class="built_in">value</span> <span class="number">3</span></div><div class="line">just <span class="keyword">after</span> subscribe</div><div class="line">got <span class="built_in">value</span> <span class="number">4</span></div><div class="line">done</div></pre></td></tr></table></figure>
<p>通过结果我们可以观察到，前三个执行之后就直接跳出订阅范围，等1秒钟之后才执行4，然后才完成。</p>
<h4 id="3、amb方法"><a href="#3、amb方法" class="headerlink" title="3、amb方法"></a>3、amb方法</h4><p><code>方法定义</code><br><code>[Rx.Observable.amb(...args)]</code><br><code>作用</code><br>从一系列流中，订阅最先发射的值的可观察对象并忽略其他的可观察对象。<br><code>参数</code><br>args (Array|arguments)：方法参数为多个可观察对象（流），或者是Promise对象，对象间存在竞争关系。<br><code>返回值</code><br>(Observable) ：方法返回呈竞争态的多个可观察对象中，首先发射的可观察对象。<br><code>总结</code><br>简单的说，<code>amb()</code>像一个多路电闸，一次仅能构建一条通路：</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|</div><div class="line">A B C D E F G H</div><div class="line">|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|</div><div class="line">     \</div><div class="line">      \   开关臂</div><div class="line">       \   </div><div class="line">       |<span class="string"></span></div><div class="line">      主线</div><div class="line">       |</div></pre></td></tr></table></figure>
<p>实例</p>
<p>HTML<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">&lt;body&gt;</span></div><div class="line">  &lt;<span class="built_in">input</span> id=<span class="string">"input1"</span> <span class="built_in">type</span>=<span class="string">"text"</span>&gt;</div><div class="line">  &lt;<span class="built_in">input</span> id=<span class="string">"input2"</span> <span class="built_in">type</span>=<span class="string">"text"</span>&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure></p>
<p>JS<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 取元素</span></div><div class="line"><span class="keyword">var</span> input1 = $(<span class="string">'#input1'</span>);</div><div class="line"><span class="keyword">var</span> input2 = $(<span class="string">'#input2'</span>);</div><div class="line"><span class="comment">// 定义事件流</span></div><div class="line"><span class="keyword">var</span> event1 = Rx.Observable.fromEvent(input1, <span class="string">'click'</span>).map(<span class="function"><span class="params">()</span>=&gt;</span><span class="string">'one'</span>)</div><div class="line"><span class="keyword">var</span> event2 = Rx.Observable.fromEvent(input2, <span class="string">'click'</span>).map(<span class="function"><span class="params">()</span>=&gt;</span><span class="string">'two'</span>);</div><div class="line"><span class="comment">//传入事件流</span></div><div class="line"><span class="keyword">var</span> source = Rx.Observable.amb(event1,event2);</div></pre></td></tr></table></figure></p>
<p>上面例子中<br><code>amb()</code>中传入了两个点击事件流。<br>事件流1，会在点击后发射字符串one；<br>事件流2，会在点击后发射字符串two；<br>初始情况下，产生事件流1之后，事件流2不会再被输出；<br>反之亦然，我们可以订阅<code>amb()</code>产生的结果流：<a href="http://jsbin.com/pitayi/edit?html,js,console,output" target="_blank" rel="external">amb()操作符演示</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> subscription = source.subscribe(</div><div class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(x);</div><div class="line">    &#125;,</div><div class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Error: '</span> + err);   </div><div class="line">    &#125;,</div><div class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Completed'</span>);   </div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<p>使用场景 1：秒杀</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Observable.amb(</div><div class="line">    用户A的拍下请求,</div><div class="line">    用户B的拍下请求,</div><div class="line">    用户C的拍下请求,</div><div class="line">    ...</div><div class="line">).subscribe(<span class="function"><span class="keyword">function</span><span class="params">(user)</span> </span>&#123;</div><div class="line">    执行购买逻辑，创建订单，打开支付工具</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>使用场景 1：通话</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Observable.amb(</div><div class="line">    A来电,</div><div class="line">    B来电,</div><div class="line">    C来电,</div><div class="line">    ...</div><div class="line">).subscribe(<span class="function"><span class="keyword">function</span><span class="params">(call)</span> </span>&#123;</div><div class="line">    通话</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h4 id="4-case方法"><a href="#4-case方法" class="headerlink" title="4. case方法"></a>4. case方法</h4><p><code>方法定义</code><br><code>[Rx.Observable.case(selector, sources, [elseSource|scheduler])]</code></p>
<p><code>作用</code><br>选择序列中特定可观察对象进行订阅，在特定可观察对象不存在的情况下，返回传入的默认可观察对象。</p>
<p><code>参数</code><br><code>selector (Function)</code>: 返回键的字符串的函数，键用以与sources中的键名进行比较。<br><code>sources (Object)</code>: 一个包含可观察对象的Javascript对象。<br><code>[elseSource|scheduler] (Observable | Scheduler)</code>:当selector无法匹配sources时，该对象被默认返回。 如果没有明确指定，将返回附加了指定scheduler的<code>Rx.Observabe.empty</code> 对象。</p>
<p><code>返回值</code><br>(Observable): 返回值为经过选择后的Observable（可观察对象）。</p>
<p><code>实例</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> sources = &#123;</div><div class="line">  <span class="attr">hello</span>: Rx.Observable.just(<span class="string">'clx'</span>),</div><div class="line">  <span class="attr">world</span>: Rx.Observable.just(<span class="string">'wxq'</span>)</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> subscription = Rx.Observable.case(<span class="function"><span class="params">()</span>=&gt;</span><span class="string">"hello"</span>, sources, Rx.Observable.empty())</div><div class="line"></div><div class="line">subscription.subscribe(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(x)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>实例中，匿名函数()=&gt;”hello”指定需要在sources中返回的可观察对象的键名为”hello”，命令行最终输出”clx”，<a href="https://jsbin.com/kodije/edit?js,console,output" target="_blank" rel="external">点击进入case()实例</a>。</p>
<p>适用场景<br>针对表单进行校验，校验用户的<code>手机号</code>和<code>邮箱</code>是否和服务器记录重复，将所有校验封装在validate对象中结构更为合理：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> validate = &#123;</div><div class="line">    <span class="string">"mobile"</span>: Observable.<span class="keyword">return</span>(<span class="string">'123-566-789-01'</span>),</div><div class="line">    <span class="string">"email"</span>: Observable.<span class="keyword">return</span>(<span class="string">'JonSnow@company.com'</span>)</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> emptyObserable = Observable.<span class="keyword">empty</span>();</div><div class="line">validate.<span class="keyword">case</span>(()=&gt;<span class="string">'mobile'</span>, validate, <span class="keyword">empty</span>)</div><div class="line">    .subscribe(<span class="function"><span class="keyword">function</span><span class="params">(mobile)</span></span>&#123;</div><div class="line">        <span class="comment">// 验证手机号码是否重复</span></div><div class="line">    &#125;)</div><div class="line">validate.<span class="keyword">case</span>(()=&gt;<span class="string">'email'</span>, validate, <span class="keyword">empty</span>)</div><div class="line">    .subscribe(<span class="function"><span class="keyword">function</span><span class="params">(email)</span></span>&#123;</div><div class="line">        <span class="comment">// 验证用户邮箱是否重复</span></div><div class="line">    &#125;)</div></pre></td></tr></table></figure>
<h4 id="4-catch-方法"><a href="#4-catch-方法" class="headerlink" title="4. catch()方法"></a>4. catch()方法</h4><p><code>方法定义</code><br>Rx.Observable.catch(…args)</p>
<p><code>作用</code><br>序列中可观察对象因为异常而被终止后，继续订阅序列中的其他可观察对象。</p>
<p><code>参数</code><br>args (Array | arguments): 可观察对象序列。</p>
<p><code>返回值</code><br>(Observable): 可观察对象序列中能够正确终止，不抛出异常的第一个可观察对象。</p>
<p>实例</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obs1 = Rx.Observable.throw(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'error'</span>));</div><div class="line"><span class="keyword">var</span> obs2 = Rx.Observable.return(<span class="number">42</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> source = Rx.Observable.catch(obs1, obs2);</div><div class="line"></div><div class="line"><span class="keyword">var</span> subscription = source.subscribe(</div><div class="line">  <span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`onNext: <span class="subst">$&#123;x&#125;</span>`</span>),</div><div class="line">  e =&gt; <span class="built_in">console</span>.log(<span class="string">`onError: <span class="subst">$&#123;e&#125;</span>`</span>),</div><div class="line">  () =&gt; <span class="built_in">console</span>.log(<span class="string">'onCompleted'</span>));</div></pre></td></tr></table></figure>
<p>手机验证码实例<br>这样，用户能够收到验证码并成功验证的几率大大增加。</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var service1 = Observable.create(<span class="string">"服务提供商#1"</span>);</div><div class="line">var service2 = Observable.create(<span class="string">"服务提供商#1"</span>);</div><div class="line"></div><div class="line">Observable.<span class="keyword">catch</span>(service1, service2).subscribe(&#123;</div><div class="line">    ()=&gt;<span class="built_in">console</span>.log(<span class="string">'succeed'</span>),</div><div class="line">    <span class="function"><span class="params">()</span>=&gt;</span><span class="built_in">console</span>.log(<span class="string">'所有验证服务均不可用'</span>)</div><div class="line">    ()=&gt;<span class="built_in">console</span>.log(<span class="string">'completed'</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h4 id="5-combineLatest方法"><a href="#5-combineLatest方法" class="headerlink" title="5. combineLatest方法"></a>5. combineLatest方法</h4><p><code>方法定义</code><br>Rx.Observable.combineLatest(…args, [resultSelector])</p>
<p><code>作用</code><br>通过处理函数总是将指定的可观察对象序列中最新发射的值合并为一个可观察对象。</p>
<p><code>参数</code><br><code>args (arguments | Array)</code>: 一系列可观察对象或可观察对象的数组。<br><code>[resultSelector] (Function)</code>: 在所有可观察对象都发射值后调用的处理函数。</p>
<p><code>返回值</code><br>(Observable): 由传入的可观察序列经过处理函数合并后的结果组成的可观察序列。</p>
<p>实例</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> colors = [<span class="string">"紫色"</span>,<span class="string">"黄色"</span>,<span class="string">"蓝色"</span>,<span class="string">"黑色"</span>];</div><div class="line"><span class="keyword">var</span> shapes = [<span class="string">"小星星"</span>,<span class="string">"圆形"</span>,<span class="string">"三角形"</span>,<span class="string">"正方形"</span>,<span class="string">"心形"</span>,<span class="string">"五边形"</span>];</div><div class="line"><span class="keyword">var</span> source1 = Rx.Observable.interval(<span class="number">3000</span>)</div><div class="line">  .map(<span class="function"><span class="params">()</span>=&gt;</span>colors.pop());</div><div class="line"><span class="keyword">var</span> source2 = Rx.Observable.interval(<span class="number">2000</span>)</div><div class="line">  .map(<span class="function"><span class="params">()</span>=&gt;</span>shapes.pop());</div><div class="line"></div><div class="line"><span class="keyword">var</span> combined = Rx.Observable.combineLatest(source1, source2, <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> x + <span class="string">"的"</span> + y;</div><div class="line">&#125;).take(<span class="number">8</span>);</div><div class="line"></div><div class="line">combined.subscribe(<span class="function">(<span class="params">shaped</span>)=&gt;</span><span class="built_in">console</span>.log(shaped));</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;RxJS是用于通过使用观察序列构成异步和基于事件的程序库。它提供了一个核心类型——&lt;a href=&quot;http://reactivex.io/rxjs/manual/overview.html#observable&quot;&gt;Observable&lt;/a&gt;（Observer, Schedulers, Subjects）和数组＃其他（map, filter, reduce, every, etc），以允许处理异步事件集合。&lt;br&gt;
    
    </summary>
    
      <category term="angular2" scheme="http://blog.xiaomo.info/categories/angular2/"/>
    
    
      <category term="angular2" scheme="http://blog.xiaomo.info/tags/angular2/"/>
    
      <category term="rxjs" scheme="http://blog.xiaomo.info/tags/rxjs/"/>
    
  </entry>
  
  <entry>
    <title>javascript设计模式</title>
    <link href="http://blog.xiaomo.info/2016/07/02/JavascriptDesignPattern/"/>
    <id>http://blog.xiaomo.info/2016/07/02/JavascriptDesignPattern/</id>
    <published>2016-07-01T16:00:00.000Z</published>
    <updated>2016-11-25T07:12:23.446Z</updated>
    
    <content type="html"><![CDATA[<p>设计模式是一套反复使用的、思想成熟、经过分类和无数实战总结出来的。使用设计模式是为了让代码可重用、可扩展、可解藕、更容易让人理解并且有保证代码的可靠性。设计模式能够真正工程化，设计模式是软件工程的基石脉络，如同大厦的结构一样。只有夯实基础结构，才能盖好健壮的大楼。 也是我们迈向高级开发人员必经的一步。<br><a id="more"></a><br><a href="https://github.com/qq83387856" target="_blank" rel="external"><img src="http://static.xiaomo.info/images/javascript.png" alt="点击访问小莫的github"></a></p>
<h3 id="一、设计原则"><a href="#一、设计原则" class="headerlink" title="一、设计原则"></a>一、设计原则</h3><h4 id="1-开闭原则"><a href="#1-开闭原则" class="headerlink" title="1. 开闭原则"></a>1. 开闭原则</h4><p>对扩展开发，对修改关闭。</p>
<h4 id="2-里氏替换原则"><a href="#2-里氏替换原则" class="headerlink" title="2.  里氏替换原则"></a>2.  里氏替换原则</h4><p>子类继承父类，但单独调用完全可以运行。</p>
<h4 id="3-依赖倒转原则"><a href="#3-依赖倒转原则" class="headerlink" title="3. 依赖倒转原则"></a>3. 依赖倒转原则</h4><p>引用一个对象，如果这个对象有低层类型，直接引用低层。</p>
<h4 id="4-接口隔离原则"><a href="#4-接口隔离原则" class="headerlink" title="4. 接口隔离原则"></a>4. 接口隔离原则</h4><p>每一个接口应该是一种角色。</p>
<h4 id="5-合成-聚合复用原则"><a href="#5-合成-聚合复用原则" class="headerlink" title="5. 合成/聚合复用原则"></a>5. 合成/聚合复用原则</h4><p>新的对象应使用一些己有的对象，使之成为新对象的一部分。</p>
<h4 id="6-迪米特原则"><a href="#6-迪米特原则" class="headerlink" title="6. 迪米特原则"></a>6. 迪米特原则</h4><p>一个对象在对其他对象尽可能少的了解。</p>
<h3 id="二、-设计模式"><a href="#二、-设计模式" class="headerlink" title="二、 设计模式"></a>二、 设计模式</h3><h4 id="1-原型模式"><a href="#1-原型模式" class="headerlink" title="1. 原型模式"></a>1. 原型模式</h4><p>概念：和javascript的prototype不同<br>prototype是指原型实例(new)指向创建对象的种类，并且通过拷贝这些原型创建新的对象。如克隆</p>
<p>作用：<br>原型对象本身就是有效的利用了每个构造器创建的对象</p>
<p>注意事项：<br>注意深拷贝和浅拷贝，以免出现引用问题。</p>
<p>代码实战和总结：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//声明一个对象</span></div><div class="line">  <span class="keyword">var</span> myObj = &#123;</div><div class="line">    <span class="attr">str</span>:<span class="string">'myStr'</span>,</div><div class="line">    <span class="attr">num</span>:<span class="number">1</span>,</div><div class="line">    <span class="attr">myArr</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</div><div class="line">    <span class="attr">myObj</span>:&#123;</div><div class="line">      <span class="attr">innerObj</span>:&#123;</div><div class="line">        <span class="attr">test</span>:<span class="number">25</span></div><div class="line">      &#125;,</div><div class="line">      <span class="attr">innerStr</span>:<span class="string">'innerStr'</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line"><span class="comment">//拷贝对象的方法（浅拷贝）会影响原型</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">clone</span> (<span class="params">obj</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> ret = &#123;&#125;;</div><div class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> obj)&#123;</div><div class="line">        ret[k]= obj[k];</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> ret;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">//深拷贝  使用Object.create</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">result</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">  result.prototype = <span class="built_in">Object</span>.create(myObj);</div><div class="line">  <span class="keyword">var</span> _result = <span class="keyword">new</span> result();</div><div class="line"></div><div class="line">  <span class="comment">//执行</span></div><div class="line">  <span class="keyword">var</span> result = clone(myObj);</div><div class="line">  result.myObj.innerStr = <span class="string">'outStr'</span>;</div><div class="line">  <span class="built_in">console</span>.log(result);</div></pre></td></tr></table></figure>
<p>Object.create(prototype,optionalDescriptorObjects)</p>
<h4 id="2-策略模式"><a href="#2-策略模式" class="headerlink" title="2. 策略模式"></a>2. 策略模式</h4><p>概念：<br>策略模式定义了算法家族，分别封装起来，让它们之间可以相互替换，此模式让算法的变化不会影响到使用算法的客户。（目标一致，顺序不同，例如：田忌赛马）</p>
<p>作用：<br>所有的这些算法都是做相同的事情，只是实现不同。<br>以相同的方法调用所有的方法，减少了各种算法在和使用算法类之间的耦合。<br>单独定义了算法类，也方便单元测试。</p>
<p>注意事项：<br>不仅可以封装算法，也可以封装几乎任何类型的规则，是要在分析过程中需要在不同时间应用不同的规则， 可以考虑使用策略模式</p>
<p>代码实战和总结</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">//普通的验证</span></div><div class="line">  <span class="keyword">var</span> $input = $(<span class="string">'input'</span>).val();</div><div class="line">  <span class="keyword">var</span> val = &#123;</div><div class="line">    isEmpty:<span class="function"><span class="keyword">function</span><span class="params">(argument)</span></span>&#123;</div><div class="line">      <span class="comment">// code</span></div><div class="line">    &#125;</div><div class="line">    isTel:<span class="function"><span class="keyword">function</span><span class="params">(argument)</span></span>&#123;</div><div class="line">      <span class="comment">// code</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> ise = val.isEmpty($input);</div><div class="line">  <span class="keyword">var</span> isTel = val.isTel($input)</div><div class="line">  <span class="keyword">if</span>(ise &amp;&amp; isTel)&#123;</div><div class="line">    alert(<span class="string">'ok'</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line"><span class="comment">// 挂载到$fn.val上   典型的策略模式验证</span></div><div class="line">  $input(&#123;</div><div class="line">    isEmpty:<span class="keyword">false</span>,</div><div class="line">    isTel:<span class="keyword">True</span></div><div class="line">    &#125;)</div></pre></td></tr></table></figure>
<h4 id="3-组合模式"><a href="#3-组合模式" class="headerlink" title="3. 组合模式"></a>3. 组合模式</h4><p>概念：</p>
<p>作用：</p>
<p>注意事项：</p>
<p>代码实战和总结：</p>
<h4 id="4-外观模式"><a href="#4-外观模式" class="headerlink" title="4. 外观模式"></a>4. 外观模式</h4><p>概念：</p>
<p>作用：</p>
<p>注意事项：</p>
<p>代码实战和总结</p>
<h4 id="5-迭代器模式"><a href="#5-迭代器模式" class="headerlink" title="5. 迭代器模式"></a>5. 迭代器模式</h4><p>概念：</p>
<p>作用：</p>
<p>注意事项：</p>
<p>代码实战和总结</p>
<h4 id="6-命令模式"><a href="#6-命令模式" class="headerlink" title="6. 命令模式"></a>6. 命令模式</h4><p>概念：</p>
<p>作用：</p>
<p>注意事项：</p>
<p>代码实战和总结</p>
<h4 id="7-代理模式"><a href="#7-代理模式" class="headerlink" title="7. 代理模式"></a>7. 代理模式</h4><p>概念：</p>
<p>作用：</p>
<p>注意事项：</p>
<p>代码实战和总结</p>
<h4 id="8-适配器模式"><a href="#8-适配器模式" class="headerlink" title="8. 适配器模式"></a>8. 适配器模式</h4><p>概念：</p>
<p>作用：</p>
<p>注意事项：</p>
<p>代码实战和总结</p>
<h4 id="9-责任链模式"><a href="#9-责任链模式" class="headerlink" title="9. 责任链模式"></a>9. 责任链模式</h4><p>概念：</p>
<p>作用：</p>
<p>注意事项：</p>
<p>代码实战和总结</p>
<h4 id="10-工厂模式"><a href="#10-工厂模式" class="headerlink" title="10. 工厂模式"></a>10. 工厂模式</h4><p>概念：</p>
<p>作用：</p>
<p>注意事项：</p>
<p>代码实战和总结</p>
<h4 id="11-单例模式"><a href="#11-单例模式" class="headerlink" title="11. 单例模式"></a>11. 单例模式</h4><p>概念：</p>
<p>作用：</p>
<p>注意事项：</p>
<p>代码实战和总结</p>
<h4 id="12-观察者模式"><a href="#12-观察者模式" class="headerlink" title="12. 观察者模式"></a>12. 观察者模式</h4><p>概念：</p>
<p>作用：</p>
<p>注意事项：</p>
<p>代码实战和总结</p>
<h4 id="13-中介者模式"><a href="#13-中介者模式" class="headerlink" title="13. 中介者模式"></a>13. 中介者模式</h4><p>概念：</p>
<p>作用：</p>
<p>注意事项：</p>
<p>代码实战和总结</p>
<h4 id="14-装饰者模式"><a href="#14-装饰者模式" class="headerlink" title="14. 装饰者模式"></a>14. 装饰者模式</h4><p>概念：</p>
<p>作用：</p>
<p>注意事项：</p>
<p>代码实战和总结</p>
<h4 id="15-建造者模式"><a href="#15-建造者模式" class="headerlink" title="15. 建造者模式"></a>15. 建造者模式</h4><p>概念：</p>
<p>作用：</p>
<p>注意事项：</p>
<p>代码实战和总结</p>
<h4 id="16-构造函数模式"><a href="#16-构造函数模式" class="headerlink" title="16. 构造函数模式"></a>16. 构造函数模式</h4><p>概念：</p>
<p>作用：</p>
<p>注意事项：</p>
<p>代码实战和总结</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;设计模式是一套反复使用的、思想成熟、经过分类和无数实战总结出来的。使用设计模式是为了让代码可重用、可扩展、可解藕、更容易让人理解并且有保证代码的可靠性。设计模式能够真正工程化，设计模式是软件工程的基石脉络，如同大厦的结构一样。只有夯实基础结构，才能盖好健壮的大楼。 也是我们迈向高级开发人员必经的一步。&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://blog.xiaomo.info/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://blog.xiaomo.info/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>5年学习计划</title>
    <link href="http://blog.xiaomo.info/2016/07/01/2016StudyPlan/"/>
    <id>http://blog.xiaomo.info/2016/07/01/2016StudyPlan/</id>
    <published>2016-06-30T16:00:00.000Z</published>
    <updated>2016-11-25T07:12:23.870Z</updated>
    
    <content type="html"><![CDATA[<p>2015年，软件开发界发生了很多变化。有很多流行的新语言发布了，也有很多重要的框架和工具发布了新版本。下面有一个我们觉得最重要的简短清单，同时也有我们觉得值得你在2016年花时间精力去学习的新事物的一些建议。<br><a id="more"></a><br><a href="https://github.com/qq83387856" target="_blank" rel="external"><img src="http://static.xiaomo.info/images/2016.png" alt="点击访问小莫的github"></a></p>
<h3 id="一、开发工具"><a href="#一、开发工具" class="headerlink" title="一、开发工具"></a>一、开发工具</h3><h4 id="1-atom"><a href="#1-atom" class="headerlink" title="1. atom"></a>1. atom</h4><p>Atom 代码编辑器支持 Windows、Mac、Linux 三大桌面平台，完全免费，并且已经在 GitHub 上开放了全部的源代码。在经过一段长时间的迭代开发和不断改进后，Atom 终于从早期的测试版达到了 1.0 正式版了！相比之前的版本，在性能和稳定性方面都有着显著的改善。</p>
<h4 id="2-idea"><a href="#2-idea" class="headerlink" title="2. idea"></a>2. idea</h4><p>IDEA 全称IntelliJ IDEA，是java语言开发的集成环境，IntelliJ在业界被公认为最好的java开发工具之一，尤其在智能代码助手、代码自动提示、重构、J2EE支持、Ant、JUnit、CVS整合、代码审查、 创新的GUI设计等方面的功能可以说是超常的。IDEA是JetBrains公司的产品，这家公司总部位于捷克共和国的首都布拉格，开发人员以严谨著称的东欧程序员为主。</p>
<h4 id="3-eclipse"><a href="#3-eclipse" class="headerlink" title="3. eclipse"></a>3. eclipse</h4><p>虽然用上了IDEA之后再也不想回到eclipse。虽然它恶心，但是它毕竟伴随了很多程序员大部分时间，给点最起码的尊重。</p>
<h4 id="4-lodash"><a href="#4-lodash" class="headerlink" title="4. lodash"></a>4. lodash</h4><p>lodash一开始是Underscore.js库的一个fork，因为和其他(Underscore.js的)贡献者意见相左。John-David Dalton的最初目标，是提供更多“一致的跨浏览器行为……，并改善性能”。之后，该项目在现有成功的基础之上取得了更大的成果。最近lodash也发布了3.5版，成为了npm包仓库中依赖最多的库。它正在摆脱屌丝身份，成为开发者的常规的选择之一。</p>
<h4 id="5-fetch"><a href="#5-fetch" class="headerlink" title="5. fetch"></a>5. fetch</h4><p>对于 AJAX，现在一般都是使用各种框架实现，其本质是 XMLHttpRequest。使用过原生XMLHttpRequest的人都知道，这种方法实现起来不太方便。现在，我们有了新的选择：Fetch API。</p>
<h4 id="6-Electron"><a href="#6-Electron" class="headerlink" title="6. Electron"></a>6. Electron</h4><p>Electron 框架的前身是 Atom Shell，可以让你写使用 JavaScript，HTML 和 CSS 构建跨平台的桌面应用程序。它是基于io.js 和 Chromium 开源项目，并用于在 Atom 编辑器中。Electron 是开源的，由 GitHub 维护，有一个活跃的社区。最重要的是，Electron 应用服务构建和运行在 Mac，Windows 和 Linux。</p>
<h3 id="二、javascript框架"><a href="#二、javascript框架" class="headerlink" title="二、javascript框架"></a>二、javascript框架</h3><h4 id="1-angular2"><a href="#1-angular2" class="headerlink" title="1. angular2"></a>1. angular2</h4><h5 id="跨平台开发"><a href="#跨平台开发" class="headerlink" title="跨平台开发"></a>跨平台开发</h5><p>学习如何基于 Angular 构建应用程序，并复用代码和技能来构建适用于所有平台的应用。比如： Web 应用、移动 Web 应用、原生移动应用和原生桌面应用等。</p>
<h5 id="速度与性能"><a href="#速度与性能" class="headerlink" title="速度与性能"></a>速度与性能</h5><p>通过 Web Worker 和服务端渲染，达到在如今 ( 以及未来）的 Web 平台上所能达到的最高速度。<br>Angular 让你有效掌控可伸缩性。基于 RxJS 、 Immutable.js 和其它推送模型，能适应海量数据需求。</p>
<h5 id="美妙的工具"><a href="#美妙的工具" class="headerlink" title="美妙的工具"></a>美妙的工具</h5><p>使用简单的声明式模板，快速实现各种特性。使用自定义组件和大量现有组件，扩展模板语言。在几乎所有的 IDE 中获得针对 Angular 的即时帮助和反馈。所有这一切，都是为了帮助你编写漂亮的应用，而不是绞尽脑汁的让代码“能用”。</p>
<h4 id="2-react-redux"><a href="#2-react-redux" class="headerlink" title="2. react+redux"></a>2. react+redux</h4><p>React+Redux非常精炼，良好运用将发挥出极强劲的生产力。但最大的挑战来自于函数式编程（FP）范式。在工程化过程中，架构（顶层）设计将是一个巨大的挑战。要不然做出来的东西可能是一团乱麻。说到底，传统框架与react+redux就是OO与FP编程范式的对决。</p>
<h4 id="3-jquery"><a href="#3-jquery" class="headerlink" title="3. jquery"></a>3. jquery</h4><p>JQuery是继prototype之后又一个优秀的Javascript库。它是轻量级的js库 ，它兼容CSS3，还兼容各种浏览器（IE 6.0+, FF 1.5+, Safari 2.0+, Opera 9.0+），jQuery2.0及后续版本将不再支持IE6/7/8浏览器。</p>
<h3 id="三、node相关技术"><a href="#三、node相关技术" class="headerlink" title="三、node相关技术"></a>三、node相关技术</h3><h4 id="1-npm"><a href="#1-npm" class="headerlink" title="1. npm"></a>1. npm</h4><p>NPM（node package manager），通常称为node包管理器。顾名思义，它的主要功能就是管理node包，包括：安装、卸载、更新、查看、搜索、发布等。</p>
<h4 id="2-koa2"><a href="#2-koa2" class="headerlink" title="2. koa2"></a>2. koa2</h4><p>koa 是由 Express 原班人马打造的，致力于成为一个更小、更富有表现力、更健壮的 Web 框架。使用 koa 编写 web 应用，通过组合不同的 generator，可以免除重复繁琐的回调函数嵌套，并极大地提升错误处理的效率。koa 不在内核方法中绑定任何中间件，它仅仅提供了一个轻量优雅的函数库，使得编写 Web 应用变得得心应手。</p>
<h4 id="3-rxjs"><a href="#3-rxjs" class="headerlink" title="3. rxjs"></a>3. rxjs</h4><p>是一组库使用可观察到的集合和阵列、演员风格组成，组成异步和基于事件的程序。</p>
<h4 id="4-zonejs"><a href="#4-zonejs" class="headerlink" title="4. zonejs"></a>4. zonejs</h4><p>在ng2的开发过程中，Angular团队为我们带来了一个新的库 – zone.js。zone.js的设计灵感来源于Dart语言，它描述JavaScript执行过程的上下文，可以在异步任务之间进行持久性传递，它类似于Java中的TLS（thread-local storage: 线程本地存储）技术，zone.js则是将TLS引入到JavaScript语言中的实现框架。</p>
<h3 id="四、设计模式"><a href="#四、设计模式" class="headerlink" title="四、设计模式"></a>四、设计模式</h3><h4 id="1-javascript设计模式"><a href="#1-javascript设计模式" class="headerlink" title="1. javascript设计模式"></a>1. <a href="http://blog.xiaomo.info/2016/07/02/javascript_design_pattern/">javascript设计模式</a></h4><h4 id="2-java设计模式"><a href="#2-java设计模式" class="headerlink" title="2. java设计模式"></a>2. java设计模式</h4><h3 id="五、编程语言"><a href="#五、编程语言" class="headerlink" title="五、编程语言"></a>五、编程语言</h3><h4 id="1-javascript"><a href="#1-javascript" class="headerlink" title="1. javascript"></a>1. javascript</h4><p>JavaScript一种直译式脚本语言，是一种动态类型、弱类型、基于原型的语言，内置支持类型。它的解释器被称为JavaScript引擎，为浏览器的一部分，广泛用于客户端的脚本语言，最早是在HTML（标准通用标记语言下的一个应用）网页上使用，用来给HTML网页增加动态功能。</p>
<h4 id="2-ecmscript6"><a href="#2-ecmscript6" class="headerlink" title="2. ecmscript6"></a>2. ecmscript6</h4><p>ES6是继ES5之后的一次主要改进，语言规范由ES5.1时代的245页扩充至600页。ES6增添了许多必要的特性，例如：模块和类，以及一些实用特性，例如Maps、Sets、Promises、生成器（Generators）等。尽管ES6做了大量的更新，但是它依旧完全向后兼容以前的版本，标准化委员会决定避免由不兼容版本语言导致的“web体验破碎”。结果是，所有老代码都可以正常运行，整个过渡也显得更为平滑，但随之而来的问题是，开发者们抱怨了多年的老问题依然存在。</p>
<h4 id="3-typesript"><a href="#3-typesript" class="headerlink" title="3. typesript"></a>3. typesript</h4><p>typescript是JavaScript的超集。TypeScript是JavaScript类型的超集，它可以编译成纯JavaScript。TypeScript可以在任何浏览器、任何计算机和任何操作系统上运行，并且是开源的。</p>
<h4 id="4-java"><a href="#4-java" class="headerlink" title="4. java"></a>4. java</h4><p>java是继c/c++使用最广泛的开发语言，写java真的是越写越觉得舒服。java生态环境十分良好，有大量优秀的开源框架以供选择。</p>
<h5 id="1-spring"><a href="#1-spring" class="headerlink" title="1. spring"></a>1. spring</h5><p>Spring 是一个开源框架，是为了解决企业应用程序开发复杂性而创建的。框架的主要优势之一就是其分层架构，分层架构允许您选择使用哪一个组件，同时为 J2EE 应用程序开发提供集成的框架。 </p>
<h5 id="2-struts2"><a href="#2-struts2" class="headerlink" title="2. struts2"></a>2. struts2</h5><p>Struts2框架是一个轻量级的MVC流程框架，轻量级是指程序的代码不是很多，运行时占用的资源不是很多，MVC流程框架就是说它是支持分层开发，控制数据的流程，从哪里来，到那里去，怎么来，怎么去的这样一个框架</p>
<h5 id="3-hibernate"><a href="#3-hibernate" class="headerlink" title="3. hibernate"></a>3. hibernate</h5><p>hibernate是轻量级JavaEE应用的一个持久层框架。它的作用在于管理Java实体类到数据库表之间的映射关系，并且提供数据查询和获取数据的方法，可以大幅度的缩短使用JDBC处理数据持久化的时间。</p>
<h5 id="4-mybatis"><a href="#4-mybatis" class="headerlink" title="4. mybatis"></a>4. mybatis</h5><p>一个基于Java的持久层框架。iBATIS提供的持久层框架包括SQL Maps和Data Access Objects（DAO），同时还提供一个利用这个框架开发的 JPetStore实例</p>
<h5 id="5-springMVC"><a href="#5-springMVC" class="headerlink" title="5. springMVC"></a>5. springMVC</h5><p>Spring MVC框架是有一个MVC框架，通过实现Model-View-Controller模式来很好地将数据、业务与展现进行分离。从这样一个角度来说，Spring MVC和Struts、Struts2非常类似。Spring MVC的设计是围绕DispatcherServlet展开的，DispatcherServlet负责将请求派发到特定的handler</p>
<h5 id="6-Play-Framework"><a href="#6-Play-Framework" class="headerlink" title="6. Play Framework"></a>6. Play Framework</h5><p>有别于其他臃肿的企业级 Java 框架，简洁的 Play 框架提供另外一种选择，它关注于开发者的效率和 RESTful 风格的架构。Play 是 敏捷软件开发的完美伴侣。</p>
<h3 id="六、数据存储"><a href="#六、数据存储" class="headerlink" title="六、数据存储"></a>六、数据存储</h3><h4 id="1-mysql"><a href="#1-mysql" class="headerlink" title="1. mysql"></a>1. mysql</h4><p>MySQL是一个关系型数据库管理系统，由瑞典MySQL AB 公司开发，目前属于 Oracle 旗下公司。MySQL 最流行的关系型数据库管理系统，在 WEB 应用方面MySQL是最好的 RDBMS (Relational Database Management System，关系数据库管理系统) 应用软件之一。</p>
<h4 id="2-mongodb"><a href="#2-mongodb" class="headerlink" title="2. mongodb"></a>2. mongodb</h4><p>MongoDB 是一个基于分布式文件存储的数据库。由 C++ 语言编写。旨在为 WEB 应用提供可扩展的高性能数据存储解决方案。MongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。</p>
<h4 id="3-redis"><a href="#3-redis" class="headerlink" title="3. redis"></a>3. redis</h4><p>Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。</p>
<h4 id="4-cookie"><a href="#4-cookie" class="headerlink" title="4. cookie"></a>4. cookie</h4><p>Cookie，有时也用其复数形式Cookies，指某些网站为了辨别用户身份、进行session跟踪而储存在用户本地终端上的数据（通常经过加密）</p>
<h4 id="5-access-token"><a href="#5-access-token" class="headerlink" title="5. access token"></a>5. access token</h4><p>Windows操作系统安全性的一个概念。一个访问令牌包含了此登陆会话的安全信息。当用户登陆时，系统创建一个访问令牌，然后以该用户身份运行的的所有进程都拥有该令牌的一个拷贝。该令牌唯一表示该用户、用户的组和用户的特权。系统使用令牌控制用户可以访问哪些安全对象，并控制用户执行相关系统操作的能力。有两种令牌：主令牌和模拟的令牌。主令牌是与进程相关的；模拟的令牌是与模拟令牌的线程相关的。</p>
<h3 id="七、html5-css3"><a href="#七、html5-css3" class="headerlink" title="七、html5+css3"></a>七、html5+css3</h3><h4 id="1-html5"><a href="#1-html5" class="headerlink" title="1. html5"></a>1. html5</h4><p>HTML5是HTML最新的修订版本，2014年10月由万维网联盟（W3C）完成标准制定。<br>HTML5的设计目的是为了在移动设备上支持多媒体。<br>HTML5 简单易学。</p>
<h4 id="2-canvas"><a href="#2-canvas" class="headerlink" title="2. canvas"></a>2. canvas</h4><p>TML5 <canvas> 标签用于绘制图像（通过脚本，通常是 JavaScript）。不过，<canvas> 元素本身并没有绘制能力（它仅仅是图形的容器） - 您必须使用脚本来完成实际的绘图任务。getContext() 方法可返回一个对象，该对象提供了用于在画布上绘图的方法和属性。</canvas></canvas></p>
<h4 id="3-css3"><a href="#3-css3" class="headerlink" title="3. css3"></a>3. css3</h4><p>CSS3是CSS技术的一个升级版本，是由Adobe、Systems、Apple、Google、HP、IBM、Microsoft、Mozilla、Opera、Sun Microsystems 等许多WEB界的巨头联合组织的一个名为 “CSS Working Group” 的组织共同协商策划的。虽然目前很多细节还在讨论之中，但它还是不断地朝前发展着。2010年在HTML5成为IT界人士关注的焦点的同时，它也开始慢慢地普及开来。</p>
<h4 id="4-sass"><a href="#4-sass" class="headerlink" title="4. sass"></a>4. sass</h4><p>SASS是一种CSS的开发工具，提供了许多便利的写法，大大节省了设计者的时间，使得CSS的开发，变得简单和可维护。</p>
<h4 id="5-白鹭引擎"><a href="#5-白鹭引擎" class="headerlink" title="5. 白鹭引擎"></a>5. 白鹭引擎</h4><p>白鹭引擎是一个开源的、跨平台的手机游戏开发引擎,你可以快速地创建HTML5类型的移动游戏,也可以将游戏项目编译输出成为目标移动平台的原生游戏应用。</p>
<h3 id="八、算法和数据结构"><a href="#八、算法和数据结构" class="headerlink" title="八、算法和数据结构"></a>八、算法和数据结构</h3><h4 id="1-线型查找"><a href="#1-线型查找" class="headerlink" title="1. 线型查找"></a>1. 线型查找</h4><p>在一列给定的值中进行搜索，从一端开始逐一检查每个元素，直到找到所需元素的过程。线性查找又称为顺序查找·如果查找池是某种类型的一个表，比如一个数组，简单的查找方法是从表头开始，一次将每一个值与目标元素进行比较，最后，或者查找到目标，或者达到表尾，而目标不存在于组中，这个方法称为线性查找。</p>
<h4 id="2-二分查找"><a href="#2-二分查找" class="headerlink" title="2. 二分查找"></a>2. 二分查找</h4><p>二分查找又称折半查找，优点是比较次数少，查找速度快，平均性能好；其缺点是要求待查表为有序表，且插入删除困难。因此，折半查找方法适用于不经常变动而查找频繁的有序列表。首先，假设表中元素是按升序排列，将表中间位置记录的关键字与查找关键字比较，如果两者相等，则查找成功；否则利用中间位置记录将表分成前、后两个子表，如果中间位置记录的关键字大于查找关键字，则进一步查找前一子表，否则进一步查找后一子表。重复以上过程，直到找到满足条件的记录，使查找成功，或直到子表不存在为止，此时查找不成功。</p>
<h4 id="3-冒泡排序"><a href="#3-冒泡排序" class="headerlink" title="3. 冒泡排序"></a>3. 冒泡排序</h4><p>冒泡排序（Bubble Sort），是一种计算机科学领域的较简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。</p>
<h4 id="4-选择排序"><a href="#4-选择排序" class="headerlink" title="4. 选择排序"></a>4. 选择排序</h4><p>选择排序（Selection sort）是一种简单直观的排序算法。它的工作原理是每一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完。 选择排序是不稳定的排序方法（比如序列[5， 5， 3]第一次就将第一个[5]与[3]交换，导致第一个5挪动到第二个5后面）。</p>
<h4 id="5-插入排序"><a href="#5-插入排序" class="headerlink" title="5. 插入排序"></a>5. 插入排序</h4><p>插入排序的基本思想是：每步将一个待排序的纪录，按其关键码值的大小插入前面已经排序的文件中适当位置上，直到全部插入完为止。</p>
<h4 id="6-字符串反转"><a href="#6-字符串反转" class="headerlink" title="6. 字符串反转"></a>6. 字符串反转</h4><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var <span class="built_in">str</span> = <span class="string">'123'</span>;</div><div class="line">var newStr = <span class="built_in">str</span>.<span class="built_in">split</span>(<span class="string">""</span>).<span class="built_in">reverse</span>().<span class="built_in">join</span>(<span class="string">""</span>);</div><div class="line">alert(newStr);</div></pre></td></tr></table></figure>
<h4 id="7-搜索算法"><a href="#7-搜索算法" class="headerlink" title="7. 搜索算法"></a>7. 搜索算法</h4><p>搜索算法是利用计算机的高性能来有目的的穷举一个问题解空间的部分或所有的可能情况，从而求出问题的解的一种方法。搜索算法实际上是根据初始条件和扩展规则构造一棵“解答树”并寻找符合目标状态的节点的过程。</p>
<h4 id="8-贪心算法"><a href="#8-贪心算法" class="headerlink" title="8. 贪心算法"></a>8. 贪心算法</h4><p>贪心算法（又称贪婪算法）是指，在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，他所做出的是在某种意义上的局部最优解。贪心算法不是对所有问题都能得到整体最优解，关键是贪心策略的选择，选择的贪心策略必须具备无后效性，即某个状态以前的过程不会影响以后的状态，只与当前状态有关。</p>
<h4 id="9-tween算法"><a href="#9-tween算法" class="headerlink" title="9. tween算法"></a>9. tween算法</h4><p>Flash做动画时会用到Tween类，利用它可以做很多动画效果，例如缓动、弹簧等等。</p>
<h4 id="10-javascript算法库"><a href="#10-javascript算法库" class="headerlink" title="10. javascript算法库"></a>10. javascript算法库</h4><ul>
<li><a href="https://github.com/sjkaliski/numbers.js/" target="_blank" rel="external">numbers.js</a></li>
<li><a href="http://www.numericjs.com/" target="_blank" rel="external">Numeric Javascript </a></li>
<li><a href="http://worrydream.com/Tangle/" target="_blank" rel="external">Tangle</a></li>
<li><a href="http://josscrowcroft.github.io/accounting.js/" target="_blank" rel="external">accounting.js</a><h3 id="九、测试框架"><a href="#九、测试框架" class="headerlink" title="九、测试框架"></a>九、测试框架</h3><h4 id="1-mocha"><a href="#1-mocha" class="headerlink" title="1. mocha"></a>1. mocha</h4>mocha 是一个简单、灵活有趣的 JavaScript 测试框架，用于 Node.js 和浏览器上的 JavaScript 应用测试。Mocha 是具有丰富特性的 JavaScript 测试框架，可以运行在 Node.js 和浏览器中，使得异步测试更简单更有趣。Mocha 可以持续运行测试，支持灵活又准确的报告，当映射到未捕获异常时转到正确的测试示例。<h4 id="2-karma"><a href="#2-karma" class="headerlink" title="2. karma"></a>2. karma</h4>Karma是Testacular的新名字，在2012年google开源了Testacular，2013年Testacular改名为Karma。Karma是一个让人感到非常神秘的名字，表示佛教中的缘分，因果报应，比Cassandra这种名字更让人猜不透！Karma是一个基于Node.js的JavaScript测试执行过程管理工具（Test Runner）。该工具可用于测试所有主流Web浏览器，也可集成到CI（Continuous integration）工具，也可和其他代码编辑器一起使用。这个测试工具的一个强大特性就是，它可以监控(Watch)文件的变化，然后自行执行，通过console.log显示测试结果。<h4 id="3-jasmine"><a href="#3-jasmine" class="headerlink" title="3. jasmine"></a>3. jasmine</h4>Jasmine （茉莉）是一款 JavaScript BDD（行为驱动开发）测试框架，它不依赖于其他任何 JavaScript 组件。它有干净清晰的语法，让您可以很简单的写出测试代码。对基于 JavaScript 的开发来说，它是一款不错的测试框架选择。<h4 id="4-chai"><a href="#4-chai" class="headerlink" title="4. chai"></a>4. chai</h4>Chai 是一个针对 Node.js 和浏览器的行为驱动测试和测试驱动测试的诊断库，可与任何 JavaScript 测试框架集成。<h4 id="5-Qunit"><a href="#5-Qunit" class="headerlink" title="5.Qunit"></a>5.Qunit</h4>该框架诞生之初是为了jquery的单元测试，后来独立出来不再依赖于jquery本身，但是其身上还是脱离不开jquery的影子<h4 id="6-should-js"><a href="#6-should-js" class="headerlink" title="6. should.js:"></a>6. should.js:</h4>TJ的另外一个开源贡献<h4 id="7-expect-js"><a href="#7-expect-js" class="headerlink" title="7. expect.js"></a>7. expect.js</h4>BDD风格的另外一个断言库，基于should.js,是mini版的BDD库<h4 id="8-assert"><a href="#8-assert" class="headerlink" title="8. assert"></a>8. assert</h4>node自带核心模块: 可以在node中使用的断言模块</li>
</ul>
<h3 id="十、重构"><a href="#十、重构" class="headerlink" title="十、重构"></a>十、<a href="http://www.raychase.net/138" target="_blank" rel="external">重构</a></h3><h4 id="1-命名"><a href="#1-命名" class="headerlink" title="1. 命名"></a>1. 命名</h4><p> 模块划分和命名空间</p>
<h4 id="2-加载"><a href="#2-加载" class="headerlink" title="2. 加载"></a>2. 加载</h4><p>js的动态加载</p>
<h4 id="3-测试"><a href="#3-测试" class="headerlink" title="3. 测试"></a>3. 测试</h4><p>Javascript的测试</p>
<h4 id="4-编码"><a href="#4-编码" class="headerlink" title="4. 编码"></a>4. 编码</h4><p> Javascript编码规则</p>
<h4 id="5-闭包"><a href="#5-闭包" class="headerlink" title="5. 闭包"></a>5. 闭包</h4><p> 利用原型/闭包开发组件</p>
<h4 id="6-继承"><a href="#6-继承" class="headerlink" title="6. 继承"></a>6. 继承</h4><p> 利用继承来做事</p>
<h4 id="7-重用"><a href="#7-重用" class="headerlink" title="7. 重用"></a>7. 重用</h4><p> 重用老代码</p>
<h4 id="8-检测"><a href="#8-检测" class="headerlink" title="8. 检测"></a>8. 检测</h4><p> JSDoc和JSLint</p>
<h4 id="9-框架"><a href="#9-框架" class="headerlink" title="9.  框架"></a>9.  框架</h4><p>自定义JavaScript产品框架</p>
<h4 id="10-强化"><a href="#10-强化" class="headerlink" title="10.  强化"></a>10.  强化</h4><p>强化对象封装和模块封装</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2015年，软件开发界发生了很多变化。有很多流行的新语言发布了，也有很多重要的框架和工具发布了新版本。下面有一个我们觉得最重要的简短清单，同时也有我们觉得值得你在2016年花时间精力去学习的新事物的一些建议。&lt;br&gt;
    
    </summary>
    
      <category term="生活" scheme="http://blog.xiaomo.info/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="技术" scheme="http://blog.xiaomo.info/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
</feed>
